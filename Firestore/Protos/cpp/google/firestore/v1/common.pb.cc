/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/v1/common.proto

#include "google/firestore/v1/common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace google {
namespace firestore {
namespace v1 {
constexpr DocumentMask::DocumentMask(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_paths_(){}
struct DocumentMaskDefaultTypeInternal {
  constexpr DocumentMaskDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DocumentMaskDefaultTypeInternal() {}
  union {
    DocumentMask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DocumentMaskDefaultTypeInternal _DocumentMask_default_instance_;
constexpr Precondition::Precondition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct PreconditionDefaultTypeInternal {
  constexpr PreconditionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreconditionDefaultTypeInternal() {}
  union {
    Precondition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreconditionDefaultTypeInternal _Precondition_default_instance_;
constexpr TransactionOptions_ReadWrite::TransactionOptions_ReadWrite(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : retry_transaction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TransactionOptions_ReadWriteDefaultTypeInternal {
  constexpr TransactionOptions_ReadWriteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionOptions_ReadWriteDefaultTypeInternal() {}
  union {
    TransactionOptions_ReadWrite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionOptions_ReadWriteDefaultTypeInternal _TransactionOptions_ReadWrite_default_instance_;
constexpr TransactionOptions_ReadOnly::TransactionOptions_ReadOnly(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct TransactionOptions_ReadOnlyDefaultTypeInternal {
  constexpr TransactionOptions_ReadOnlyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionOptions_ReadOnlyDefaultTypeInternal() {}
  union {
    TransactionOptions_ReadOnly _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionOptions_ReadOnlyDefaultTypeInternal _TransactionOptions_ReadOnly_default_instance_;
constexpr TransactionOptions::TransactionOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct TransactionOptionsDefaultTypeInternal {
  constexpr TransactionOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionOptionsDefaultTypeInternal() {}
  union {
    TransactionOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionOptionsDefaultTypeInternal _TransactionOptions_default_instance_;
}  // namespace v1
}  // namespace firestore
}  // namespace google
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2ffirestore_2fv1_2fcommon_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_google_2ffirestore_2fv1_2fcommon_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2ffirestore_2fv1_2fcommon_2eproto = nullptr;

const uint32_t TableStruct_google_2ffirestore_2fv1_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::DocumentMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::DocumentMask, field_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Precondition, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Precondition, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Precondition, condition_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TransactionOptions_ReadWrite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TransactionOptions_ReadWrite, retry_transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TransactionOptions_ReadOnly, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TransactionOptions_ReadOnly, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TransactionOptions_ReadOnly, consistency_selector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TransactionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TransactionOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TransactionOptions, mode_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::google::firestore::v1::DocumentMask)},
  { 7, -1, -1, sizeof(::google::firestore::v1::Precondition)},
  { 16, -1, -1, sizeof(::google::firestore::v1::TransactionOptions_ReadWrite)},
  { 23, -1, -1, sizeof(::google::firestore::v1::TransactionOptions_ReadOnly)},
  { 31, -1, -1, sizeof(::google::firestore::v1::TransactionOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_DocumentMask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_Precondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_TransactionOptions_ReadWrite_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_TransactionOptions_ReadOnly_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_TransactionOptions_default_instance_),
};

const char descriptor_table_protodef_google_2ffirestore_2fv1_2fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n google/firestore/v1/common.proto\022\023goog"
  "le.firestore.v1\032\034google/api/annotations."
  "proto\032\037google/protobuf/timestamp.proto\"#"
  "\n\014DocumentMask\022\023\n\013field_paths\030\001 \003(\t\"e\n\014P"
  "recondition\022\020\n\006exists\030\001 \001(\010H\000\0221\n\013update_"
  "time\030\002 \001(\0132\032.google.protobuf.TimestampH\000"
  "B\020\n\016condition_type\"\251\002\n\022TransactionOption"
  "s\022E\n\tread_only\030\002 \001(\01320.google.firestore."
  "v1.TransactionOptions.ReadOnlyH\000\022G\n\nread"
  "_write\030\003 \001(\01321.google.firestore.v1.Trans"
  "actionOptions.ReadWriteH\000\032&\n\tReadWrite\022\031"
  "\n\021retry_transaction\030\001 \001(\014\032S\n\010ReadOnly\022/\n"
  "\tread_time\030\002 \001(\0132\032.google.protobuf.Times"
  "tampH\000B\026\n\024consistency_selectorB\006\n\004modeB\257"
  "\001\n\027com.google.firestore.v1B\013CommonProtoP"
  "\001Z<google.golang.org/genproto/googleapis"
  "/firestore/v1;firestore\242\002\004GCFS\252\002\036Google."
  "Cloud.Firestore.V1Beta1\312\002\036Google\\Cloud\\F"
  "irestore\\V1beta1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto = {
  false, false, 744, descriptor_table_protodef_google_2ffirestore_2fv1_2fcommon_2eproto, "google/firestore/v1/common.proto", 
  &descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto_once, descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_google_2ffirestore_2fv1_2fcommon_2eproto::offsets,
  file_level_metadata_google_2ffirestore_2fv1_2fcommon_2eproto, file_level_enum_descriptors_google_2ffirestore_2fv1_2fcommon_2eproto, file_level_service_descriptors_google_2ffirestore_2fv1_2fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto_getter() {
  return &descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_google_2ffirestore_2fv1_2fcommon_2eproto(&descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto);
namespace google {
namespace firestore {
namespace v1 {

// ===================================================================

class DocumentMask::_Internal {
 public:
};

DocumentMask::DocumentMask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  field_paths_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.DocumentMask)
}
DocumentMask::DocumentMask(const DocumentMask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_paths_(from.field_paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.DocumentMask)
}

inline void DocumentMask::SharedCtor() {
}

DocumentMask::~DocumentMask() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.DocumentMask)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DocumentMask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DocumentMask::ArenaDtor(void* object) {
  DocumentMask* _this = reinterpret_cast< DocumentMask* >(object);
  (void)_this;
}
void DocumentMask::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DocumentMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DocumentMask::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.DocumentMask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_paths_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocumentMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string field_paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field_paths();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.DocumentMask.field_paths"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocumentMask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.DocumentMask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string field_paths = 1;
  for (int i = 0, n = this->_internal_field_paths_size(); i < n; i++) {
    const auto& s = this->_internal_field_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.DocumentMask.field_paths");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.DocumentMask)
  return target;
}

size_t DocumentMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.DocumentMask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string field_paths = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_paths_.size());
  for (int i = 0, n = field_paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      field_paths_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocumentMask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DocumentMask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocumentMask::GetClassData() const { return &_class_data_; }

void DocumentMask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DocumentMask *>(to)->MergeFrom(
      static_cast<const DocumentMask &>(from));
}


void DocumentMask::MergeFrom(const DocumentMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.DocumentMask)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  field_paths_.MergeFrom(from.field_paths_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocumentMask::CopyFrom(const DocumentMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.DocumentMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentMask::IsInitialized() const {
  return true;
}

void DocumentMask::InternalSwap(DocumentMask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  field_paths_.InternalSwap(&other->field_paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DocumentMask::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2fcommon_2eproto[0]);
}

// ===================================================================

class Precondition::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const Precondition* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Precondition::_Internal::update_time(const Precondition* msg) {
  return *msg->condition_type_.update_time_;
}
void Precondition::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_condition_type();
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    set_has_update_time();
    condition_type_.update_time_ = update_time;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Precondition.update_time)
}
void Precondition::clear_update_time() {
  if (_internal_has_update_time()) {
    if (GetArenaForAllocation() == nullptr) {
      delete condition_type_.update_time_;
    }
    clear_has_condition_type();
  }
}
Precondition::Precondition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.Precondition)
}
Precondition::Precondition(const Precondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_condition_type();
  switch (from.condition_type_case()) {
    case kExists: {
      _internal_set_exists(from._internal_exists());
      break;
    }
    case kUpdateTime: {
      _internal_mutable_update_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
      break;
    }
    case CONDITION_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.Precondition)
}

inline void Precondition::SharedCtor() {
clear_has_condition_type();
}

Precondition::~Precondition() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.Precondition)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Precondition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_condition_type()) {
    clear_condition_type();
  }
}

void Precondition::ArenaDtor(void* object) {
  Precondition* _this = reinterpret_cast< Precondition* >(object);
  (void)_this;
}
void Precondition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Precondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Precondition::clear_condition_type() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.Precondition)
  switch (condition_type_case()) {
    case kExists: {
      // No need to clear
      break;
    }
    case kUpdateTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete condition_type_.update_time_;
      }
      break;
    }
    case CONDITION_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONDITION_TYPE_NOT_SET;
}


void Precondition::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.Precondition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_condition_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Precondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool exists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_exists(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp update_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Precondition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.Precondition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool exists = 1;
  if (_internal_has_exists()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_exists(), target);
  }

  // .google.protobuf.Timestamp update_time = 2;
  if (_internal_has_update_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::update_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.Precondition)
  return target;
}

size_t Precondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.Precondition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (condition_type_case()) {
    // bool exists = 1;
    case kExists: {
      total_size += 1 + 1;
      break;
    }
    // .google.protobuf.Timestamp update_time = 2;
    case kUpdateTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *condition_type_.update_time_);
      break;
    }
    case CONDITION_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Precondition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Precondition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Precondition::GetClassData() const { return &_class_data_; }

void Precondition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Precondition *>(to)->MergeFrom(
      static_cast<const Precondition &>(from));
}


void Precondition::MergeFrom(const Precondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.Precondition)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.condition_type_case()) {
    case kExists: {
      _internal_set_exists(from._internal_exists());
      break;
    }
    case kUpdateTime: {
      _internal_mutable_update_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
      break;
    }
    case CONDITION_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Precondition::CopyFrom(const Precondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.Precondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Precondition::IsInitialized() const {
  return true;
}

void Precondition::InternalSwap(Precondition* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(condition_type_, other->condition_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Precondition::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2fcommon_2eproto[1]);
}

// ===================================================================

class TransactionOptions_ReadWrite::_Internal {
 public:
};

TransactionOptions_ReadWrite::TransactionOptions_ReadWrite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.TransactionOptions.ReadWrite)
}
TransactionOptions_ReadWrite::TransactionOptions_ReadWrite(const TransactionOptions_ReadWrite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  retry_transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    retry_transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_retry_transaction().empty()) {
    retry_transaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_retry_transaction(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.TransactionOptions.ReadWrite)
}

inline void TransactionOptions_ReadWrite::SharedCtor() {
retry_transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  retry_transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransactionOptions_ReadWrite::~TransactionOptions_ReadWrite() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.TransactionOptions.ReadWrite)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionOptions_ReadWrite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  retry_transaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionOptions_ReadWrite::ArenaDtor(void* object) {
  TransactionOptions_ReadWrite* _this = reinterpret_cast< TransactionOptions_ReadWrite* >(object);
  (void)_this;
}
void TransactionOptions_ReadWrite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionOptions_ReadWrite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionOptions_ReadWrite::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.TransactionOptions.ReadWrite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retry_transaction_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionOptions_ReadWrite::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes retry_transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_retry_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionOptions_ReadWrite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.TransactionOptions.ReadWrite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes retry_transaction = 1;
  if (!this->_internal_retry_transaction().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_retry_transaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.TransactionOptions.ReadWrite)
  return target;
}

size_t TransactionOptions_ReadWrite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.TransactionOptions.ReadWrite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes retry_transaction = 1;
  if (!this->_internal_retry_transaction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_retry_transaction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionOptions_ReadWrite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionOptions_ReadWrite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionOptions_ReadWrite::GetClassData() const { return &_class_data_; }

void TransactionOptions_ReadWrite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionOptions_ReadWrite *>(to)->MergeFrom(
      static_cast<const TransactionOptions_ReadWrite &>(from));
}


void TransactionOptions_ReadWrite::MergeFrom(const TransactionOptions_ReadWrite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.TransactionOptions.ReadWrite)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_retry_transaction().empty()) {
    _internal_set_retry_transaction(from._internal_retry_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionOptions_ReadWrite::CopyFrom(const TransactionOptions_ReadWrite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.TransactionOptions.ReadWrite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOptions_ReadWrite::IsInitialized() const {
  return true;
}

void TransactionOptions_ReadWrite::InternalSwap(TransactionOptions_ReadWrite* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &retry_transaction_, lhs_arena,
      &other->retry_transaction_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionOptions_ReadWrite::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2fcommon_2eproto[2]);
}

// ===================================================================

class TransactionOptions_ReadOnly::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& read_time(const TransactionOptions_ReadOnly* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TransactionOptions_ReadOnly::_Internal::read_time(const TransactionOptions_ReadOnly* msg) {
  return *msg->consistency_selector_.read_time_;
}
void TransactionOptions_ReadOnly::set_allocated_read_time(::PROTOBUF_NAMESPACE_ID::Timestamp* read_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_consistency_selector();
  if (read_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_time));
    if (message_arena != submessage_arena) {
      read_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    set_has_read_time();
    consistency_selector_.read_time_ = read_time;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.TransactionOptions.ReadOnly.read_time)
}
void TransactionOptions_ReadOnly::clear_read_time() {
  if (_internal_has_read_time()) {
    if (GetArenaForAllocation() == nullptr) {
      delete consistency_selector_.read_time_;
    }
    clear_has_consistency_selector();
  }
}
TransactionOptions_ReadOnly::TransactionOptions_ReadOnly(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.TransactionOptions.ReadOnly)
}
TransactionOptions_ReadOnly::TransactionOptions_ReadOnly(const TransactionOptions_ReadOnly& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_consistency_selector();
  switch (from.consistency_selector_case()) {
    case kReadTime: {
      _internal_mutable_read_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.TransactionOptions.ReadOnly)
}

inline void TransactionOptions_ReadOnly::SharedCtor() {
clear_has_consistency_selector();
}

TransactionOptions_ReadOnly::~TransactionOptions_ReadOnly() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.TransactionOptions.ReadOnly)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionOptions_ReadOnly::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_consistency_selector()) {
    clear_consistency_selector();
  }
}

void TransactionOptions_ReadOnly::ArenaDtor(void* object) {
  TransactionOptions_ReadOnly* _this = reinterpret_cast< TransactionOptions_ReadOnly* >(object);
  (void)_this;
}
void TransactionOptions_ReadOnly::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionOptions_ReadOnly::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionOptions_ReadOnly::clear_consistency_selector() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.TransactionOptions.ReadOnly)
  switch (consistency_selector_case()) {
    case kReadTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete consistency_selector_.read_time_;
      }
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSISTENCY_SELECTOR_NOT_SET;
}


void TransactionOptions_ReadOnly::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.TransactionOptions.ReadOnly)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_consistency_selector();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionOptions_ReadOnly::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp read_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionOptions_ReadOnly::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.TransactionOptions.ReadOnly)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp read_time = 2;
  if (_internal_has_read_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::read_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.TransactionOptions.ReadOnly)
  return target;
}

size_t TransactionOptions_ReadOnly::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.TransactionOptions.ReadOnly)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (consistency_selector_case()) {
    // .google.protobuf.Timestamp read_time = 2;
    case kReadTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consistency_selector_.read_time_);
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionOptions_ReadOnly::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionOptions_ReadOnly::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionOptions_ReadOnly::GetClassData() const { return &_class_data_; }

void TransactionOptions_ReadOnly::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionOptions_ReadOnly *>(to)->MergeFrom(
      static_cast<const TransactionOptions_ReadOnly &>(from));
}


void TransactionOptions_ReadOnly::MergeFrom(const TransactionOptions_ReadOnly& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.TransactionOptions.ReadOnly)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.consistency_selector_case()) {
    case kReadTime: {
      _internal_mutable_read_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionOptions_ReadOnly::CopyFrom(const TransactionOptions_ReadOnly& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.TransactionOptions.ReadOnly)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOptions_ReadOnly::IsInitialized() const {
  return true;
}

void TransactionOptions_ReadOnly::InternalSwap(TransactionOptions_ReadOnly* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(consistency_selector_, other->consistency_selector_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionOptions_ReadOnly::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2fcommon_2eproto[3]);
}

// ===================================================================

class TransactionOptions::_Internal {
 public:
  static const ::google::firestore::v1::TransactionOptions_ReadOnly& read_only(const TransactionOptions* msg);
  static const ::google::firestore::v1::TransactionOptions_ReadWrite& read_write(const TransactionOptions* msg);
};

const ::google::firestore::v1::TransactionOptions_ReadOnly&
TransactionOptions::_Internal::read_only(const TransactionOptions* msg) {
  return *msg->mode_.read_only_;
}
const ::google::firestore::v1::TransactionOptions_ReadWrite&
TransactionOptions::_Internal::read_write(const TransactionOptions* msg) {
  return *msg->mode_.read_write_;
}
void TransactionOptions::set_allocated_read_only(::google::firestore::v1::TransactionOptions_ReadOnly* read_only) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_mode();
  if (read_only) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::firestore::v1::TransactionOptions_ReadOnly>::GetOwningArena(read_only);
    if (message_arena != submessage_arena) {
      read_only = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_only, submessage_arena);
    }
    set_has_read_only();
    mode_.read_only_ = read_only;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.TransactionOptions.read_only)
}
void TransactionOptions::set_allocated_read_write(::google::firestore::v1::TransactionOptions_ReadWrite* read_write) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_mode();
  if (read_write) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::firestore::v1::TransactionOptions_ReadWrite>::GetOwningArena(read_write);
    if (message_arena != submessage_arena) {
      read_write = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_write, submessage_arena);
    }
    set_has_read_write();
    mode_.read_write_ = read_write;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.TransactionOptions.read_write)
}
TransactionOptions::TransactionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.TransactionOptions)
}
TransactionOptions::TransactionOptions(const TransactionOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_mode();
  switch (from.mode_case()) {
    case kReadOnly: {
      _internal_mutable_read_only()->::google::firestore::v1::TransactionOptions_ReadOnly::MergeFrom(from._internal_read_only());
      break;
    }
    case kReadWrite: {
      _internal_mutable_read_write()->::google::firestore::v1::TransactionOptions_ReadWrite::MergeFrom(from._internal_read_write());
      break;
    }
    case MODE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.TransactionOptions)
}

inline void TransactionOptions::SharedCtor() {
clear_has_mode();
}

TransactionOptions::~TransactionOptions() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.TransactionOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_mode()) {
    clear_mode();
  }
}

void TransactionOptions::ArenaDtor(void* object) {
  TransactionOptions* _this = reinterpret_cast< TransactionOptions* >(object);
  (void)_this;
}
void TransactionOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionOptions::clear_mode() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.TransactionOptions)
  switch (mode_case()) {
    case kReadOnly: {
      if (GetArenaForAllocation() == nullptr) {
        delete mode_.read_only_;
      }
      break;
    }
    case kReadWrite: {
      if (GetArenaForAllocation() == nullptr) {
        delete mode_.read_write_;
      }
      break;
    }
    case MODE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MODE_NOT_SET;
}


void TransactionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.TransactionOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_mode();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.firestore.v1.TransactionOptions.ReadOnly read_only = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_only(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.TransactionOptions.ReadWrite read_write = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_write(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.TransactionOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.TransactionOptions.ReadOnly read_only = 2;
  if (_internal_has_read_only()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::read_only(this), target, stream);
  }

  // .google.firestore.v1.TransactionOptions.ReadWrite read_write = 3;
  if (_internal_has_read_write()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::read_write(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.TransactionOptions)
  return target;
}

size_t TransactionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.TransactionOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (mode_case()) {
    // .google.firestore.v1.TransactionOptions.ReadOnly read_only = 2;
    case kReadOnly: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mode_.read_only_);
      break;
    }
    // .google.firestore.v1.TransactionOptions.ReadWrite read_write = 3;
    case kReadWrite: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mode_.read_write_);
      break;
    }
    case MODE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionOptions::GetClassData() const { return &_class_data_; }

void TransactionOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionOptions *>(to)->MergeFrom(
      static_cast<const TransactionOptions &>(from));
}


void TransactionOptions::MergeFrom(const TransactionOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.TransactionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.mode_case()) {
    case kReadOnly: {
      _internal_mutable_read_only()->::google::firestore::v1::TransactionOptions_ReadOnly::MergeFrom(from._internal_read_only());
      break;
    }
    case kReadWrite: {
      _internal_mutable_read_write()->::google::firestore::v1::TransactionOptions_ReadWrite::MergeFrom(from._internal_read_write());
      break;
    }
    case MODE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionOptions::CopyFrom(const TransactionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.TransactionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionOptions::IsInitialized() const {
  return true;
}

void TransactionOptions::InternalSwap(TransactionOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mode_, other->mode_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2fcommon_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace firestore
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::firestore::v1::DocumentMask* Arena::CreateMaybeMessage< ::google::firestore::v1::DocumentMask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::DocumentMask >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::Precondition* Arena::CreateMaybeMessage< ::google::firestore::v1::Precondition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::Precondition >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::TransactionOptions_ReadWrite* Arena::CreateMaybeMessage< ::google::firestore::v1::TransactionOptions_ReadWrite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::TransactionOptions_ReadWrite >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::TransactionOptions_ReadOnly* Arena::CreateMaybeMessage< ::google::firestore::v1::TransactionOptions_ReadOnly >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::TransactionOptions_ReadOnly >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::TransactionOptions* Arena::CreateMaybeMessage< ::google::firestore::v1::TransactionOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::TransactionOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
