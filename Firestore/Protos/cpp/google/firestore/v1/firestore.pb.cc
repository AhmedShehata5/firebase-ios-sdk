/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/v1/firestore.proto

#include "google/firestore/v1/firestore.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace google {
namespace firestore {
namespace v1 {
constexpr GetDocumentRequest::GetDocumentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mask_(nullptr)
  , _oneof_case_{}{}
struct GetDocumentRequestDefaultTypeInternal {
  constexpr GetDocumentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetDocumentRequestDefaultTypeInternal() {}
  union {
    GetDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetDocumentRequestDefaultTypeInternal _GetDocumentRequest_default_instance_;
constexpr ListDocumentsRequest::ListDocumentsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , collection_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , order_by_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mask_(nullptr)
  , page_size_(0)
  , show_missing_(false)
  , _oneof_case_{}{}
struct ListDocumentsRequestDefaultTypeInternal {
  constexpr ListDocumentsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListDocumentsRequestDefaultTypeInternal() {}
  union {
    ListDocumentsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListDocumentsRequestDefaultTypeInternal _ListDocumentsRequest_default_instance_;
constexpr ListDocumentsResponse::ListDocumentsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : documents_()
  , next_page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListDocumentsResponseDefaultTypeInternal {
  constexpr ListDocumentsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListDocumentsResponseDefaultTypeInternal() {}
  union {
    ListDocumentsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListDocumentsResponseDefaultTypeInternal _ListDocumentsResponse_default_instance_;
constexpr CreateDocumentRequest::CreateDocumentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , collection_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , document_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , document_(nullptr)
  , mask_(nullptr){}
struct CreateDocumentRequestDefaultTypeInternal {
  constexpr CreateDocumentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateDocumentRequestDefaultTypeInternal() {}
  union {
    CreateDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateDocumentRequestDefaultTypeInternal _CreateDocumentRequest_default_instance_;
constexpr UpdateDocumentRequest::UpdateDocumentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : document_(nullptr)
  , update_mask_(nullptr)
  , mask_(nullptr)
  , current_document_(nullptr){}
struct UpdateDocumentRequestDefaultTypeInternal {
  constexpr UpdateDocumentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateDocumentRequestDefaultTypeInternal() {}
  union {
    UpdateDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateDocumentRequestDefaultTypeInternal _UpdateDocumentRequest_default_instance_;
constexpr DeleteDocumentRequest::DeleteDocumentRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , current_document_(nullptr){}
struct DeleteDocumentRequestDefaultTypeInternal {
  constexpr DeleteDocumentRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteDocumentRequestDefaultTypeInternal() {}
  union {
    DeleteDocumentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteDocumentRequestDefaultTypeInternal _DeleteDocumentRequest_default_instance_;
constexpr BatchGetDocumentsRequest::BatchGetDocumentsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : documents_()
  , database_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mask_(nullptr)
  , _oneof_case_{}{}
struct BatchGetDocumentsRequestDefaultTypeInternal {
  constexpr BatchGetDocumentsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchGetDocumentsRequestDefaultTypeInternal() {}
  union {
    BatchGetDocumentsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchGetDocumentsRequestDefaultTypeInternal _BatchGetDocumentsRequest_default_instance_;
constexpr BatchGetDocumentsResponse::BatchGetDocumentsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , read_time_(nullptr)
  , _oneof_case_{}{}
struct BatchGetDocumentsResponseDefaultTypeInternal {
  constexpr BatchGetDocumentsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchGetDocumentsResponseDefaultTypeInternal() {}
  union {
    BatchGetDocumentsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchGetDocumentsResponseDefaultTypeInternal _BatchGetDocumentsResponse_default_instance_;
constexpr BeginTransactionRequest::BeginTransactionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : database_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , options_(nullptr){}
struct BeginTransactionRequestDefaultTypeInternal {
  constexpr BeginTransactionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BeginTransactionRequestDefaultTypeInternal() {}
  union {
    BeginTransactionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BeginTransactionRequestDefaultTypeInternal _BeginTransactionRequest_default_instance_;
constexpr BeginTransactionResponse::BeginTransactionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BeginTransactionResponseDefaultTypeInternal {
  constexpr BeginTransactionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BeginTransactionResponseDefaultTypeInternal() {}
  union {
    BeginTransactionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BeginTransactionResponseDefaultTypeInternal _BeginTransactionResponse_default_instance_;
constexpr CommitRequest::CommitRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : writes_()
  , database_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transaction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CommitRequestDefaultTypeInternal {
  constexpr CommitRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommitRequestDefaultTypeInternal() {}
  union {
    CommitRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommitRequestDefaultTypeInternal _CommitRequest_default_instance_;
constexpr CommitResponse::CommitResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : write_results_()
  , commit_time_(nullptr){}
struct CommitResponseDefaultTypeInternal {
  constexpr CommitResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommitResponseDefaultTypeInternal() {}
  union {
    CommitResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommitResponseDefaultTypeInternal _CommitResponse_default_instance_;
constexpr RollbackRequest::RollbackRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : database_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transaction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RollbackRequestDefaultTypeInternal {
  constexpr RollbackRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RollbackRequestDefaultTypeInternal() {}
  union {
    RollbackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RollbackRequestDefaultTypeInternal _RollbackRequest_default_instance_;
constexpr RunQueryRequest::RunQueryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct RunQueryRequestDefaultTypeInternal {
  constexpr RunQueryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RunQueryRequestDefaultTypeInternal() {}
  union {
    RunQueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RunQueryRequestDefaultTypeInternal _RunQueryRequest_default_instance_;
constexpr RunQueryResponse::RunQueryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , document_(nullptr)
  , read_time_(nullptr)
  , skipped_results_(0){}
struct RunQueryResponseDefaultTypeInternal {
  constexpr RunQueryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RunQueryResponseDefaultTypeInternal() {}
  union {
    RunQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RunQueryResponseDefaultTypeInternal _RunQueryResponse_default_instance_;
constexpr WriteRequest_LabelsEntry_DoNotUse::WriteRequest_LabelsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct WriteRequest_LabelsEntry_DoNotUseDefaultTypeInternal {
  constexpr WriteRequest_LabelsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteRequest_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    WriteRequest_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteRequest_LabelsEntry_DoNotUseDefaultTypeInternal _WriteRequest_LabelsEntry_DoNotUse_default_instance_;
constexpr WriteRequest::WriteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : writes_()
  , labels_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , database_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stream_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stream_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct WriteRequestDefaultTypeInternal {
  constexpr WriteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteRequestDefaultTypeInternal() {}
  union {
    WriteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
constexpr WriteResponse::WriteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : write_results_()
  , stream_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stream_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , commit_time_(nullptr){}
struct WriteResponseDefaultTypeInternal {
  constexpr WriteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteResponseDefaultTypeInternal() {}
  union {
    WriteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteResponseDefaultTypeInternal _WriteResponse_default_instance_;
constexpr ListenRequest_LabelsEntry_DoNotUse::ListenRequest_LabelsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListenRequest_LabelsEntry_DoNotUseDefaultTypeInternal {
  constexpr ListenRequest_LabelsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListenRequest_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ListenRequest_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListenRequest_LabelsEntry_DoNotUseDefaultTypeInternal _ListenRequest_LabelsEntry_DoNotUse_default_instance_;
constexpr ListenRequest::ListenRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : labels_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , database_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct ListenRequestDefaultTypeInternal {
  constexpr ListenRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListenRequestDefaultTypeInternal() {}
  union {
    ListenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListenRequestDefaultTypeInternal _ListenRequest_default_instance_;
constexpr ListenResponse::ListenResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ListenResponseDefaultTypeInternal {
  constexpr ListenResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListenResponseDefaultTypeInternal() {}
  union {
    ListenResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListenResponseDefaultTypeInternal _ListenResponse_default_instance_;
constexpr Target_DocumentsTarget::Target_DocumentsTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : documents_(){}
struct Target_DocumentsTargetDefaultTypeInternal {
  constexpr Target_DocumentsTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Target_DocumentsTargetDefaultTypeInternal() {}
  union {
    Target_DocumentsTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Target_DocumentsTargetDefaultTypeInternal _Target_DocumentsTarget_default_instance_;
constexpr Target_QueryTarget::Target_QueryTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct Target_QueryTargetDefaultTypeInternal {
  constexpr Target_QueryTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Target_QueryTargetDefaultTypeInternal() {}
  union {
    Target_QueryTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Target_QueryTargetDefaultTypeInternal _Target_QueryTarget_default_instance_;
constexpr Target::Target(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_id_(0)
  , once_(false)
  , _oneof_case_{}{}
struct TargetDefaultTypeInternal {
  constexpr TargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TargetDefaultTypeInternal() {}
  union {
    Target _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TargetDefaultTypeInternal _Target_default_instance_;
constexpr TargetChange::TargetChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_ids_()
  , _target_ids_cached_byte_size_(0)
  , resume_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cause_(nullptr)
  , read_time_(nullptr)
  , target_change_type_(0)
{}
struct TargetChangeDefaultTypeInternal {
  constexpr TargetChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TargetChangeDefaultTypeInternal() {}
  union {
    TargetChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TargetChangeDefaultTypeInternal _TargetChange_default_instance_;
constexpr ListCollectionIdsRequest::ListCollectionIdsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parent_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_size_(0){}
struct ListCollectionIdsRequestDefaultTypeInternal {
  constexpr ListCollectionIdsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListCollectionIdsRequestDefaultTypeInternal() {}
  union {
    ListCollectionIdsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListCollectionIdsRequestDefaultTypeInternal _ListCollectionIdsRequest_default_instance_;
constexpr ListCollectionIdsResponse::ListCollectionIdsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : collection_ids_()
  , next_page_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListCollectionIdsResponseDefaultTypeInternal {
  constexpr ListCollectionIdsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListCollectionIdsResponseDefaultTypeInternal() {}
  union {
    ListCollectionIdsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListCollectionIdsResponseDefaultTypeInternal _ListCollectionIdsResponse_default_instance_;
}  // namespace v1
}  // namespace firestore
}  // namespace google
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_google_2ffirestore_2fv1_2ffirestore_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2ffirestore_2fv1_2ffirestore_2eproto = nullptr;

const uint32_t TableStruct_google_2ffirestore_2fv1_2ffirestore_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::GetDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::GetDocumentRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::GetDocumentRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::GetDocumentRequest, mask_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::GetDocumentRequest, consistency_selector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, collection_id_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, page_token_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, order_by_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, mask_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, show_missing_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsRequest, consistency_selector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsResponse, documents_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListDocumentsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CreateDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CreateDocumentRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CreateDocumentRequest, collection_id_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CreateDocumentRequest, document_id_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CreateDocumentRequest, document_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CreateDocumentRequest, mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::UpdateDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::UpdateDocumentRequest, document_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::UpdateDocumentRequest, update_mask_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::UpdateDocumentRequest, mask_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::UpdateDocumentRequest, current_document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::DeleteDocumentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::DeleteDocumentRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::DeleteDocumentRequest, current_document_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsRequest, database_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsRequest, documents_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsRequest, mask_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsRequest, consistency_selector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsResponse, transaction_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsResponse, read_time_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BatchGetDocumentsResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BeginTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BeginTransactionRequest, database_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BeginTransactionRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BeginTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::BeginTransactionResponse, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CommitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CommitRequest, database_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CommitRequest, writes_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CommitRequest, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CommitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CommitResponse, write_results_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::CommitResponse, commit_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RollbackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RollbackRequest, database_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RollbackRequest, transaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryRequest, parent_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryRequest, query_type_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryRequest, consistency_selector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryResponse, transaction_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryResponse, document_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryResponse, read_time_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::RunQueryResponse, skipped_results_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest, database_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest, stream_id_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest, writes_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest, stream_token_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteRequest, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteResponse, stream_id_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteResponse, stream_token_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteResponse, write_results_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::WriteResponse, commit_time_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest, database_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest, labels_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenRequest, target_change_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListenResponse, response_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target_DocumentsTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target_DocumentsTarget, documents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target_QueryTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target_QueryTarget, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target_QueryTarget, parent_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target_QueryTarget, query_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target, target_id_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target, once_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target, target_type_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::Target, resume_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TargetChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TargetChange, target_change_type_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TargetChange, target_ids_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TargetChange, cause_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TargetChange, resume_token_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::TargetChange, read_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListCollectionIdsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListCollectionIdsRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListCollectionIdsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListCollectionIdsRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListCollectionIdsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListCollectionIdsResponse, collection_ids_),
  PROTOBUF_FIELD_OFFSET(::google::firestore::v1::ListCollectionIdsResponse, next_page_token_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::google::firestore::v1::GetDocumentRequest)},
  { 11, -1, -1, sizeof(::google::firestore::v1::ListDocumentsRequest)},
  { 27, -1, -1, sizeof(::google::firestore::v1::ListDocumentsResponse)},
  { 35, -1, -1, sizeof(::google::firestore::v1::CreateDocumentRequest)},
  { 46, -1, -1, sizeof(::google::firestore::v1::UpdateDocumentRequest)},
  { 56, -1, -1, sizeof(::google::firestore::v1::DeleteDocumentRequest)},
  { 64, -1, -1, sizeof(::google::firestore::v1::BatchGetDocumentsRequest)},
  { 77, -1, -1, sizeof(::google::firestore::v1::BatchGetDocumentsResponse)},
  { 88, -1, -1, sizeof(::google::firestore::v1::BeginTransactionRequest)},
  { 96, -1, -1, sizeof(::google::firestore::v1::BeginTransactionResponse)},
  { 103, -1, -1, sizeof(::google::firestore::v1::CommitRequest)},
  { 112, -1, -1, sizeof(::google::firestore::v1::CommitResponse)},
  { 120, -1, -1, sizeof(::google::firestore::v1::RollbackRequest)},
  { 128, -1, -1, sizeof(::google::firestore::v1::RunQueryRequest)},
  { 141, -1, -1, sizeof(::google::firestore::v1::RunQueryResponse)},
  { 151, 159, -1, sizeof(::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse)},
  { 161, -1, -1, sizeof(::google::firestore::v1::WriteRequest)},
  { 172, -1, -1, sizeof(::google::firestore::v1::WriteResponse)},
  { 182, 190, -1, sizeof(::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse)},
  { 192, -1, -1, sizeof(::google::firestore::v1::ListenRequest)},
  { 203, -1, -1, sizeof(::google::firestore::v1::ListenResponse)},
  { 215, -1, -1, sizeof(::google::firestore::v1::Target_DocumentsTarget)},
  { 222, -1, -1, sizeof(::google::firestore::v1::Target_QueryTarget)},
  { 231, -1, -1, sizeof(::google::firestore::v1::Target)},
  { 245, -1, -1, sizeof(::google::firestore::v1::TargetChange)},
  { 256, -1, -1, sizeof(::google::firestore::v1::ListCollectionIdsRequest)},
  { 265, -1, -1, sizeof(::google::firestore::v1::ListCollectionIdsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_GetDocumentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_ListDocumentsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_ListDocumentsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_CreateDocumentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_UpdateDocumentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_DeleteDocumentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_BatchGetDocumentsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_BatchGetDocumentsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_BeginTransactionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_BeginTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_CommitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_CommitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_RollbackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_RunQueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_RunQueryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_WriteRequest_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_WriteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_WriteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_ListenRequest_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_ListenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_ListenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_Target_DocumentsTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_Target_QueryTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_Target_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_TargetChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_ListCollectionIdsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::firestore::v1::_ListCollectionIdsResponse_default_instance_),
};

const char descriptor_table_protodef_google_2ffirestore_2fv1_2ffirestore_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#google/firestore/v1/firestore.proto\022\023g"
  "oogle.firestore.v1\032\034google/api/annotatio"
  "ns.proto\032 google/firestore/v1/common.pro"
  "to\032\"google/firestore/v1/document.proto\032\037"
  "google/firestore/v1/query.proto\032\037google/"
  "firestore/v1/write.proto\032\033google/protobu"
  "f/empty.proto\032\037google/protobuf/timestamp"
  ".proto\032\027google/rpc/status.proto\"\263\001\n\022GetD"
  "ocumentRequest\022\014\n\004name\030\001 \001(\t\022/\n\004mask\030\002 \001"
  "(\0132!.google.firestore.v1.DocumentMask\022\025\n"
  "\013transaction\030\003 \001(\014H\000\022/\n\tread_time\030\005 \001(\0132"
  "\032.google.protobuf.TimestampH\000B\026\n\024consist"
  "ency_selector\"\235\002\n\024ListDocumentsRequest\022\016"
  "\n\006parent\030\001 \001(\t\022\025\n\rcollection_id\030\002 \001(\t\022\021\n"
  "\tpage_size\030\003 \001(\005\022\022\n\npage_token\030\004 \001(\t\022\020\n\010"
  "order_by\030\006 \001(\t\022/\n\004mask\030\007 \001(\0132!.google.fi"
  "restore.v1.DocumentMask\022\025\n\013transaction\030\010"
  " \001(\014H\000\022/\n\tread_time\030\n \001(\0132\032.google.proto"
  "buf.TimestampH\000\022\024\n\014show_missing\030\014 \001(\010B\026\n"
  "\024consistency_selector\"b\n\025ListDocumentsRe"
  "sponse\0220\n\tdocuments\030\001 \003(\0132\035.google.fires"
  "tore.v1.Document\022\027\n\017next_page_token\030\002 \001("
  "\t\"\265\001\n\025CreateDocumentRequest\022\016\n\006parent\030\001 "
  "\001(\t\022\025\n\rcollection_id\030\002 \001(\t\022\023\n\013document_i"
  "d\030\003 \001(\t\022/\n\010document\030\004 \001(\0132\035.google.fires"
  "tore.v1.Document\022/\n\004mask\030\005 \001(\0132!.google."
  "firestore.v1.DocumentMask\"\356\001\n\025UpdateDocu"
  "mentRequest\022/\n\010document\030\001 \001(\0132\035.google.f"
  "irestore.v1.Document\0226\n\013update_mask\030\002 \001("
  "\0132!.google.firestore.v1.DocumentMask\022/\n\004"
  "mask\030\003 \001(\0132!.google.firestore.v1.Documen"
  "tMask\022;\n\020current_document\030\004 \001(\0132!.google"
  ".firestore.v1.Precondition\"b\n\025DeleteDocu"
  "mentRequest\022\014\n\004name\030\001 \001(\t\022;\n\020current_doc"
  "ument\030\002 \001(\0132!.google.firestore.v1.Precon"
  "dition\"\224\002\n\030BatchGetDocumentsRequest\022\020\n\010d"
  "atabase\030\001 \001(\t\022\021\n\tdocuments\030\002 \003(\t\022/\n\004mask"
  "\030\003 \001(\0132!.google.firestore.v1.DocumentMas"
  "k\022\025\n\013transaction\030\004 \001(\014H\000\022B\n\017new_transact"
  "ion\030\005 \001(\0132\'.google.firestore.v1.Transact"
  "ionOptionsH\000\022/\n\tread_time\030\007 \001(\0132\032.google"
  ".protobuf.TimestampH\000B\026\n\024consistency_sel"
  "ector\"\254\001\n\031BatchGetDocumentsResponse\022.\n\005f"
  "ound\030\001 \001(\0132\035.google.firestore.v1.Documen"
  "tH\000\022\021\n\007missing\030\002 \001(\tH\000\022\023\n\013transaction\030\003 "
  "\001(\014\022-\n\tread_time\030\004 \001(\0132\032.google.protobuf"
  ".TimestampB\010\n\006result\"e\n\027BeginTransaction"
  "Request\022\020\n\010database\030\001 \001(\t\0228\n\007options\030\002 \001"
  "(\0132\'.google.firestore.v1.TransactionOpti"
  "ons\"/\n\030BeginTransactionResponse\022\023\n\013trans"
  "action\030\001 \001(\014\"b\n\rCommitRequest\022\020\n\010databas"
  "e\030\001 \001(\t\022*\n\006writes\030\002 \003(\0132\032.google.firesto"
  "re.v1.Write\022\023\n\013transaction\030\003 \001(\014\"z\n\016Comm"
  "itResponse\0227\n\rwrite_results\030\001 \003(\0132 .goog"
  "le.firestore.v1.WriteResult\022/\n\013commit_ti"
  "me\030\002 \001(\0132\032.google.protobuf.Timestamp\"8\n\017"
  "RollbackRequest\022\020\n\010database\030\001 \001(\t\022\023\n\013tra"
  "nsaction\030\002 \001(\014\"\225\002\n\017RunQueryRequest\022\016\n\006pa"
  "rent\030\001 \001(\t\022@\n\020structured_query\030\002 \001(\0132$.g"
  "oogle.firestore.v1.StructuredQueryH\000\022\025\n\013"
  "transaction\030\005 \001(\014H\001\022B\n\017new_transaction\030\006"
  " \001(\0132\'.google.firestore.v1.TransactionOp"
  "tionsH\001\022/\n\tread_time\030\007 \001(\0132\032.google.prot"
  "obuf.TimestampH\001B\014\n\nquery_typeB\026\n\024consis"
  "tency_selector\"\240\001\n\020RunQueryResponse\022\023\n\013t"
  "ransaction\030\002 \001(\014\022/\n\010document\030\001 \001(\0132\035.goo"
  "gle.firestore.v1.Document\022-\n\tread_time\030\003"
  " \001(\0132\032.google.protobuf.Timestamp\022\027\n\017skip"
  "ped_results\030\004 \001(\005\"\343\001\n\014WriteRequest\022\020\n\010da"
  "tabase\030\001 \001(\t\022\021\n\tstream_id\030\002 \001(\t\022*\n\006write"
  "s\030\003 \003(\0132\032.google.firestore.v1.Write\022\024\n\014s"
  "tream_token\030\004 \001(\014\022=\n\006labels\030\005 \003(\0132-.goog"
  "le.firestore.v1.WriteRequest.LabelsEntry"
  "\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t:\0028\001\"\242\001\n\rWriteResponse\022\021\n\tstream_id\030\001"
  " \001(\t\022\024\n\014stream_token\030\002 \001(\014\0227\n\rwrite_resu"
  "lts\030\003 \003(\0132 .google.firestore.v1.WriteRes"
  "ult\022/\n\013commit_time\030\004 \001(\0132\032.google.protob"
  "uf.Timestamp\"\355\001\n\rListenRequest\022\020\n\010databa"
  "se\030\001 \001(\t\0221\n\nadd_target\030\002 \001(\0132\033.google.fi"
  "restore.v1.TargetH\000\022\027\n\rremove_target\030\003 \001"
  "(\005H\000\022>\n\006labels\030\004 \003(\0132..google.firestore."
  "v1.ListenRequest.LabelsEntry\032-\n\013LabelsEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001B\017\n\rt"
  "arget_change\"\325\002\n\016ListenResponse\022:\n\rtarge"
  "t_change\030\002 \001(\0132!.google.firestore.v1.Tar"
  "getChangeH\000\022>\n\017document_change\030\003 \001(\0132#.g"
  "oogle.firestore.v1.DocumentChangeH\000\022>\n\017d"
  "ocument_delete\030\004 \001(\0132#.google.firestore."
  "v1.DocumentDeleteH\000\022>\n\017document_remove\030\006"
  " \001(\0132#.google.firestore.v1.DocumentRemov"
  "eH\000\0226\n\006filter\030\005 \001(\0132$.google.firestore.v"
  "1.ExistenceFilterH\000B\017\n\rresponse_type\"\241\003\n"
  "\006Target\0228\n\005query\030\002 \001(\0132\'.google.firestor"
  "e.v1.Target.QueryTargetH\000\022@\n\tdocuments\030\003"
  " \001(\0132+.google.firestore.v1.Target.Docume"
  "ntsTargetH\000\022\026\n\014resume_token\030\004 \001(\014H\001\022/\n\tr"
  "ead_time\030\013 \001(\0132\032.google.protobuf.Timesta"
  "mpH\001\022\021\n\ttarget_id\030\005 \001(\005\022\014\n\004once\030\006 \001(\010\032$\n"
  "\017DocumentsTarget\022\021\n\tdocuments\030\002 \003(\t\032m\n\013Q"
  "ueryTarget\022\016\n\006parent\030\001 \001(\t\022@\n\020structured"
  "_query\030\002 \001(\0132$.google.firestore.v1.Struc"
  "turedQueryH\000B\014\n\nquery_typeB\r\n\013target_typ"
  "eB\r\n\013resume_type\"\252\002\n\014TargetChange\022N\n\022tar"
  "get_change_type\030\001 \001(\01622.google.firestore"
  ".v1.TargetChange.TargetChangeType\022\022\n\ntar"
  "get_ids\030\002 \003(\005\022!\n\005cause\030\003 \001(\0132\022.google.rp"
  "c.Status\022\024\n\014resume_token\030\004 \001(\014\022-\n\tread_t"
  "ime\030\006 \001(\0132\032.google.protobuf.Timestamp\"N\n"
  "\020TargetChangeType\022\r\n\tNO_CHANGE\020\000\022\007\n\003ADD\020"
  "\001\022\n\n\006REMOVE\020\002\022\013\n\007CURRENT\020\003\022\t\n\005RESET\020\004\"Q\n"
  "\030ListCollectionIdsRequest\022\016\n\006parent\030\001 \001("
  "\t\022\021\n\tpage_size\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t"
  "\"L\n\031ListCollectionIdsResponse\022\026\n\016collect"
  "ion_ids\030\001 \003(\t\022\027\n\017next_page_token\030\002 \001(\t2\204"
  "\022\n\tFirestore\022\217\001\n\013GetDocument\022\'.google.fi"
  "restore.v1.GetDocumentRequest\032\035.google.f"
  "irestore.v1.Document\"8\202\323\344\223\0022\0220/v1/{name="
  "projects/*/databases/*/documents/*/**}\022\262"
  "\001\n\rListDocuments\022).google.firestore.v1.L"
  "istDocumentsRequest\032*.google.firestore.v"
  "1.ListDocumentsResponse\"J\202\323\344\223\002D\022B/v1/{pa"
  "rent=projects/*/databases/*/documents/*/"
  "**}/{collection_id}\022\257\001\n\016CreateDocument\022*"
  ".google.firestore.v1.CreateDocumentReque"
  "st\032\035.google.firestore.v1.Document\"R\202\323\344\223\002"
  "L\"@/v1/{parent=projects/*/databases/*/do"
  "cuments/**}/{collection_id}:\010document\022\250\001"
  "\n\016UpdateDocument\022*.google.firestore.v1.U"
  "pdateDocumentRequest\032\035.google.firestore."
  "v1.Document\"K\202\323\344\223\002E29/v1/{document.name="
  "projects/*/databases/*/documents/*/**}:\010"
  "document\022\216\001\n\016DeleteDocument\022*.google.fir"
  "estore.v1.DeleteDocumentRequest\032\026.google"
  ".protobuf.Empty\"8\202\323\344\223\0022*0/v1/{name=proje"
  "cts/*/databases/*/documents/*/**}\022\271\001\n\021Ba"
  "tchGetDocuments\022-.google.firestore.v1.Ba"
  "tchGetDocumentsRequest\032..google.firestor"
  "e.v1.BatchGetDocumentsResponse\"C\202\323\344\223\002=\"8"
  "/v1/{database=projects/*/databases/*}/do"
  "cuments:batchGet:\001*0\001\022\274\001\n\020BeginTransacti"
  "on\022,.google.firestore.v1.BeginTransactio"
  "nRequest\032-.google.firestore.v1.BeginTran"
  "sactionResponse\"K\202\323\344\223\002E\"@/v1/{database=p"
  "rojects/*/databases/*}/documents:beginTr"
  "ansaction:\001*\022\224\001\n\006Commit\022\".google.firesto"
  "re.v1.CommitRequest\032#.google.firestore.v"
  "1.CommitResponse\"A\202\323\344\223\002;\"6/v1/{database="
  "projects/*/databases/*}/documents:commit"
  ":\001*\022\215\001\n\010Rollback\022$.google.firestore.v1.R"
  "ollbackRequest\032\026.google.protobuf.Empty\"C"
  "\202\323\344\223\002=\"8/v1/{database=projects/*/databas"
  "es/*}/documents:rollback:\001*\022\337\001\n\010RunQuery"
  "\022$.google.firestore.v1.RunQueryRequest\032%"
  ".google.firestore.v1.RunQueryResponse\"\203\001"
  "\202\323\344\223\002}\"6/v1/{parent=projects/*/databases"
  "/*/documents}:runQuery:\001*Z@\";/v1/{parent"
  "=projects/*/databases/*/documents/*/**}:"
  "runQuery:\001*0\001\022\224\001\n\005Write\022!.google.firesto"
  "re.v1.WriteRequest\032\".google.firestore.v1"
  ".WriteResponse\"@\202\323\344\223\002:\"5/v1/{database=pr"
  "ojects/*/databases/*}/documents:write:\001*"
  "(\0010\001\022\230\001\n\006Listen\022\".google.firestore.v1.Li"
  "stenRequest\032#.google.firestore.v1.Listen"
  "Response\"A\202\323\344\223\002;\"6/v1/{database=projects"
  "/*/databases/*}/documents:listen:\001*(\0010\001\022"
  "\213\002\n\021ListCollectionIds\022-.google.firestore"
  ".v1.ListCollectionIdsRequest\032..google.fi"
  "restore.v1.ListCollectionIdsResponse\"\226\001\202"
  "\323\344\223\002\217\001\"\?/v1/{parent=projects/*/databases"
  "/*/documents}:listCollectionIds:\001*ZI\"D/v"
  "1/{parent=projects/*/databases/*/documen"
  "ts/*/**}:listCollectionIds:\001*B\262\001\n\027com.go"
  "ogle.firestore.v1B\016FirestoreProtoP\001Z<goo"
  "gle.golang.org/genproto/googleapis/fires"
  "tore/v1;firestore\242\002\004GCFS\252\002\036Google.Cloud."
  "Firestore.V1Beta1\312\002\036Google\\Cloud\\Firesto"
  "re\\V1beta1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_deps[8] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2ffirestore_2fv1_2fcommon_2eproto,
  &::descriptor_table_google_2ffirestore_2fv1_2fdocument_2eproto,
  &::descriptor_table_google_2ffirestore_2fv1_2fquery_2eproto,
  &::descriptor_table_google_2ffirestore_2fv1_2fwrite_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto = {
  false, false, 7098, descriptor_table_protodef_google_2ffirestore_2fv1_2ffirestore_2eproto, "google/firestore/v1/firestore.proto", 
  &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once, descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_deps, 8, 27,
  schemas, file_default_instances, TableStruct_google_2ffirestore_2fv1_2ffirestore_2eproto::offsets,
  file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto, file_level_enum_descriptors_google_2ffirestore_2fv1_2ffirestore_2eproto, file_level_service_descriptors_google_2ffirestore_2fv1_2ffirestore_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter() {
  return &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_google_2ffirestore_2fv1_2ffirestore_2eproto(&descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
namespace google {
namespace firestore {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TargetChange_TargetChangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto);
  return file_level_enum_descriptors_google_2ffirestore_2fv1_2ffirestore_2eproto[0];
}
bool TargetChange_TargetChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TargetChange_TargetChangeType TargetChange::NO_CHANGE;
constexpr TargetChange_TargetChangeType TargetChange::ADD;
constexpr TargetChange_TargetChangeType TargetChange::REMOVE;
constexpr TargetChange_TargetChangeType TargetChange::CURRENT;
constexpr TargetChange_TargetChangeType TargetChange::RESET;
constexpr TargetChange_TargetChangeType TargetChange::TargetChangeType_MIN;
constexpr TargetChange_TargetChangeType TargetChange::TargetChangeType_MAX;
constexpr int TargetChange::TargetChangeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class GetDocumentRequest::_Internal {
 public:
  static const ::google::firestore::v1::DocumentMask& mask(const GetDocumentRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& read_time(const GetDocumentRequest* msg);
};

const ::google::firestore::v1::DocumentMask&
GetDocumentRequest::_Internal::mask(const GetDocumentRequest* msg) {
  return *msg->mask_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetDocumentRequest::_Internal::read_time(const GetDocumentRequest* msg) {
  return *msg->consistency_selector_.read_time_;
}
void GetDocumentRequest::clear_mask() {
  if (GetArenaForAllocation() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
void GetDocumentRequest::set_allocated_read_time(::PROTOBUF_NAMESPACE_ID::Timestamp* read_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_consistency_selector();
  if (read_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_time));
    if (message_arena != submessage_arena) {
      read_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    set_has_read_time();
    consistency_selector_.read_time_ = read_time;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.GetDocumentRequest.read_time)
}
void GetDocumentRequest::clear_read_time() {
  if (_internal_has_read_time()) {
    if (GetArenaForAllocation() == nullptr) {
      delete consistency_selector_.read_time_;
    }
    clear_has_consistency_selector();
  }
}
GetDocumentRequest::GetDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.GetDocumentRequest)
}
GetDocumentRequest::GetDocumentRequest(const GetDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mask()) {
    mask_ = new ::google::firestore::v1::DocumentMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  clear_has_consistency_selector();
  switch (from.consistency_selector_case()) {
    case kTransaction: {
      _internal_set_transaction(from._internal_transaction());
      break;
    }
    case kReadTime: {
      _internal_mutable_read_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.GetDocumentRequest)
}

inline void GetDocumentRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mask_ = nullptr;
clear_has_consistency_selector();
}

GetDocumentRequest::~GetDocumentRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.GetDocumentRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mask_;
  if (has_consistency_selector()) {
    clear_consistency_selector();
  }
}

void GetDocumentRequest::ArenaDtor(void* object) {
  GetDocumentRequest* _this = reinterpret_cast< GetDocumentRequest* >(object);
  (void)_this;
}
void GetDocumentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDocumentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDocumentRequest::clear_consistency_selector() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.GetDocumentRequest)
  switch (consistency_selector_case()) {
    case kTransaction: {
      consistency_selector_.transaction_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kReadTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete consistency_selector_.read_time_;
      }
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSISTENCY_SELECTOR_NOT_SET;
}


void GetDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.GetDocumentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  clear_consistency_selector();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDocumentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.GetDocumentRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.DocumentMask mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes transaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp read_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDocumentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.GetDocumentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.GetDocumentRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.firestore.v1.DocumentMask mask = 2;
  if (this->_internal_has_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mask(this), target, stream);
  }

  // bytes transaction = 3;
  if (_internal_has_transaction()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_transaction(), target);
  }

  // .google.protobuf.Timestamp read_time = 5;
  if (_internal_has_read_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::read_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.GetDocumentRequest)
  return target;
}

size_t GetDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.GetDocumentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.firestore.v1.DocumentMask mask = 2;
  if (this->_internal_has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  switch (consistency_selector_case()) {
    // bytes transaction = 3;
    case kTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_transaction());
      break;
    }
    // .google.protobuf.Timestamp read_time = 5;
    case kReadTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consistency_selector_.read_time_);
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDocumentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDocumentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDocumentRequest::GetClassData() const { return &_class_data_; }

void GetDocumentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDocumentRequest *>(to)->MergeFrom(
      static_cast<const GetDocumentRequest &>(from));
}


void GetDocumentRequest::MergeFrom(const GetDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.GetDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_mask()) {
    _internal_mutable_mask()->::google::firestore::v1::DocumentMask::MergeFrom(from._internal_mask());
  }
  switch (from.consistency_selector_case()) {
    case kTransaction: {
      _internal_set_transaction(from._internal_transaction());
      break;
    }
    case kReadTime: {
      _internal_mutable_read_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDocumentRequest::CopyFrom(const GetDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.GetDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDocumentRequest::IsInitialized() const {
  return true;
}

void GetDocumentRequest::InternalSwap(GetDocumentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(mask_, other->mask_);
  swap(consistency_selector_, other->consistency_selector_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDocumentRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[0]);
}

// ===================================================================

class ListDocumentsRequest::_Internal {
 public:
  static const ::google::firestore::v1::DocumentMask& mask(const ListDocumentsRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& read_time(const ListDocumentsRequest* msg);
};

const ::google::firestore::v1::DocumentMask&
ListDocumentsRequest::_Internal::mask(const ListDocumentsRequest* msg) {
  return *msg->mask_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ListDocumentsRequest::_Internal::read_time(const ListDocumentsRequest* msg) {
  return *msg->consistency_selector_.read_time_;
}
void ListDocumentsRequest::clear_mask() {
  if (GetArenaForAllocation() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
void ListDocumentsRequest::set_allocated_read_time(::PROTOBUF_NAMESPACE_ID::Timestamp* read_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_consistency_selector();
  if (read_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_time));
    if (message_arena != submessage_arena) {
      read_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    set_has_read_time();
    consistency_selector_.read_time_ = read_time;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.ListDocumentsRequest.read_time)
}
void ListDocumentsRequest::clear_read_time() {
  if (_internal_has_read_time()) {
    if (GetArenaForAllocation() == nullptr) {
      delete consistency_selector_.read_time_;
    }
    clear_has_consistency_selector();
  }
}
ListDocumentsRequest::ListDocumentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.ListDocumentsRequest)
}
ListDocumentsRequest::ListDocumentsRequest(const ListDocumentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent().empty()) {
    parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent(), 
      GetArenaForAllocation());
  }
  collection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    collection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_id().empty()) {
    collection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collection_id(), 
      GetArenaForAllocation());
  }
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_token(), 
      GetArenaForAllocation());
  }
  order_by_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    order_by_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_order_by().empty()) {
    order_by_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_order_by(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mask()) {
    mask_ = new ::google::firestore::v1::DocumentMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  ::memcpy(&page_size_, &from.page_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_missing_) -
    reinterpret_cast<char*>(&page_size_)) + sizeof(show_missing_));
  clear_has_consistency_selector();
  switch (from.consistency_selector_case()) {
    case kTransaction: {
      _internal_set_transaction(from._internal_transaction());
      break;
    }
    case kReadTime: {
      _internal_mutable_read_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.ListDocumentsRequest)
}

inline void ListDocumentsRequest::SharedCtor() {
parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
collection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  collection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
order_by_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  order_by_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mask_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_missing_) -
    reinterpret_cast<char*>(&mask_)) + sizeof(show_missing_));
clear_has_consistency_selector();
}

ListDocumentsRequest::~ListDocumentsRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.ListDocumentsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListDocumentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_by_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mask_;
  if (has_consistency_selector()) {
    clear_consistency_selector();
  }
}

void ListDocumentsRequest::ArenaDtor(void* object) {
  ListDocumentsRequest* _this = reinterpret_cast< ListDocumentsRequest* >(object);
  (void)_this;
}
void ListDocumentsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDocumentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListDocumentsRequest::clear_consistency_selector() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.ListDocumentsRequest)
  switch (consistency_selector_case()) {
    case kTransaction: {
      consistency_selector_.transaction_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kReadTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete consistency_selector_.read_time_;
      }
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSISTENCY_SELECTOR_NOT_SET;
}


void ListDocumentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.ListDocumentsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty();
  collection_id_.ClearToEmpty();
  page_token_.ClearToEmpty();
  order_by_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  ::memset(&page_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_missing_) -
      reinterpret_cast<char*>(&page_size_)) + sizeof(show_missing_));
  clear_consistency_selector();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDocumentsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.ListDocumentsRequest.parent"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string collection_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_collection_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.ListDocumentsRequest.collection_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.ListDocumentsRequest.page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string order_by = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_order_by();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.ListDocumentsRequest.order_by"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.DocumentMask mask = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes transaction = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp read_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool show_missing = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          show_missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDocumentsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.ListDocumentsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (!this->_internal_parent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListDocumentsRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // string collection_id = 2;
  if (!this->_internal_collection_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_id().data(), static_cast<int>(this->_internal_collection_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListDocumentsRequest.collection_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collection_id(), target);
  }

  // int32 page_size = 3;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_page_size(), target);
  }

  // string page_token = 4;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListDocumentsRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_page_token(), target);
  }

  // string order_by = 6;
  if (!this->_internal_order_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_order_by().data(), static_cast<int>(this->_internal_order_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListDocumentsRequest.order_by");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_order_by(), target);
  }

  // .google.firestore.v1.DocumentMask mask = 7;
  if (this->_internal_has_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::mask(this), target, stream);
  }

  // bytes transaction = 8;
  if (_internal_has_transaction()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_transaction(), target);
  }

  // .google.protobuf.Timestamp read_time = 10;
  if (_internal_has_read_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::read_time(this), target, stream);
  }

  // bool show_missing = 12;
  if (this->_internal_show_missing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_show_missing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.ListDocumentsRequest)
  return target;
}

size_t ListDocumentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.ListDocumentsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (!this->_internal_parent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // string collection_id = 2;
  if (!this->_internal_collection_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_id());
  }

  // string page_token = 4;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // string order_by = 6;
  if (!this->_internal_order_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_order_by());
  }

  // .google.firestore.v1.DocumentMask mask = 7;
  if (this->_internal_has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  // int32 page_size = 3;
  if (this->_internal_page_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  // bool show_missing = 12;
  if (this->_internal_show_missing() != 0) {
    total_size += 1 + 1;
  }

  switch (consistency_selector_case()) {
    // bytes transaction = 8;
    case kTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_transaction());
      break;
    }
    // .google.protobuf.Timestamp read_time = 10;
    case kReadTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consistency_selector_.read_time_);
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDocumentsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListDocumentsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDocumentsRequest::GetClassData() const { return &_class_data_; }

void ListDocumentsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListDocumentsRequest *>(to)->MergeFrom(
      static_cast<const ListDocumentsRequest &>(from));
}


void ListDocumentsRequest::MergeFrom(const ListDocumentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.ListDocumentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent().empty()) {
    _internal_set_parent(from._internal_parent());
  }
  if (!from._internal_collection_id().empty()) {
    _internal_set_collection_id(from._internal_collection_id());
  }
  if (!from._internal_page_token().empty()) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (!from._internal_order_by().empty()) {
    _internal_set_order_by(from._internal_order_by());
  }
  if (from._internal_has_mask()) {
    _internal_mutable_mask()->::google::firestore::v1::DocumentMask::MergeFrom(from._internal_mask());
  }
  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  if (from._internal_show_missing() != 0) {
    _internal_set_show_missing(from._internal_show_missing());
  }
  switch (from.consistency_selector_case()) {
    case kTransaction: {
      _internal_set_transaction(from._internal_transaction());
      break;
    }
    case kReadTime: {
      _internal_mutable_read_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDocumentsRequest::CopyFrom(const ListDocumentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.ListDocumentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDocumentsRequest::IsInitialized() const {
  return true;
}

void ListDocumentsRequest::InternalSwap(ListDocumentsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parent_, lhs_arena,
      &other->parent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &collection_id_, lhs_arena,
      &other->collection_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &page_token_, lhs_arena,
      &other->page_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &order_by_, lhs_arena,
      &other->order_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListDocumentsRequest, show_missing_)
      + sizeof(ListDocumentsRequest::show_missing_)
      - PROTOBUF_FIELD_OFFSET(ListDocumentsRequest, mask_)>(
          reinterpret_cast<char*>(&mask_),
          reinterpret_cast<char*>(&other->mask_));
  swap(consistency_selector_, other->consistency_selector_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDocumentsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[1]);
}

// ===================================================================

class ListDocumentsResponse::_Internal {
 public:
};

void ListDocumentsResponse::clear_documents() {
  documents_.Clear();
}
ListDocumentsResponse::ListDocumentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  documents_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.ListDocumentsResponse)
}
ListDocumentsResponse::ListDocumentsResponse(const ListDocumentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      documents_(from.documents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_page_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.ListDocumentsResponse)
}

inline void ListDocumentsResponse::SharedCtor() {
next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListDocumentsResponse::~ListDocumentsResponse() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.ListDocumentsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListDocumentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListDocumentsResponse::ArenaDtor(void* object) {
  ListDocumentsResponse* _this = reinterpret_cast< ListDocumentsResponse* >(object);
  (void)_this;
}
void ListDocumentsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListDocumentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListDocumentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.ListDocumentsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDocumentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.firestore.v1.Document documents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_documents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.ListDocumentsResponse.next_page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDocumentsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.ListDocumentsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.firestore.v1.Document documents = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_documents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_documents(i), target, stream);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListDocumentsResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.ListDocumentsResponse)
  return target;
}

size_t ListDocumentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.ListDocumentsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.firestore.v1.Document documents = 1;
  total_size += 1UL * this->_internal_documents_size();
  for (const auto& msg : this->documents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDocumentsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListDocumentsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDocumentsResponse::GetClassData() const { return &_class_data_; }

void ListDocumentsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListDocumentsResponse *>(to)->MergeFrom(
      static_cast<const ListDocumentsResponse &>(from));
}


void ListDocumentsResponse::MergeFrom(const ListDocumentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.ListDocumentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
  if (!from._internal_next_page_token().empty()) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDocumentsResponse::CopyFrom(const ListDocumentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.ListDocumentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDocumentsResponse::IsInitialized() const {
  return true;
}

void ListDocumentsResponse::InternalSwap(ListDocumentsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  documents_.InternalSwap(&other->documents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_page_token_, lhs_arena,
      &other->next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDocumentsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[2]);
}

// ===================================================================

class CreateDocumentRequest::_Internal {
 public:
  static const ::google::firestore::v1::Document& document(const CreateDocumentRequest* msg);
  static const ::google::firestore::v1::DocumentMask& mask(const CreateDocumentRequest* msg);
};

const ::google::firestore::v1::Document&
CreateDocumentRequest::_Internal::document(const CreateDocumentRequest* msg) {
  return *msg->document_;
}
const ::google::firestore::v1::DocumentMask&
CreateDocumentRequest::_Internal::mask(const CreateDocumentRequest* msg) {
  return *msg->mask_;
}
void CreateDocumentRequest::clear_document() {
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
void CreateDocumentRequest::clear_mask() {
  if (GetArenaForAllocation() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
CreateDocumentRequest::CreateDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.CreateDocumentRequest)
}
CreateDocumentRequest::CreateDocumentRequest(const CreateDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent().empty()) {
    parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent(), 
      GetArenaForAllocation());
  }
  collection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    collection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_collection_id().empty()) {
    collection_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_collection_id(), 
      GetArenaForAllocation());
  }
  document_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    document_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_document_id().empty()) {
    document_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_document_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_document()) {
    document_ = new ::google::firestore::v1::Document(*from.document_);
  } else {
    document_ = nullptr;
  }
  if (from._internal_has_mask()) {
    mask_ = new ::google::firestore::v1::DocumentMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.CreateDocumentRequest)
}

inline void CreateDocumentRequest::SharedCtor() {
parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
collection_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  collection_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
document_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  document_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&document_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mask_) -
    reinterpret_cast<char*>(&document_)) + sizeof(mask_));
}

CreateDocumentRequest::~CreateDocumentRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.CreateDocumentRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  collection_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  document_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete document_;
  if (this != internal_default_instance()) delete mask_;
}

void CreateDocumentRequest::ArenaDtor(void* object) {
  CreateDocumentRequest* _this = reinterpret_cast< CreateDocumentRequest* >(object);
  (void)_this;
}
void CreateDocumentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateDocumentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.CreateDocumentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty();
  collection_id_.ClearToEmpty();
  document_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateDocumentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.CreateDocumentRequest.parent"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string collection_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_collection_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.CreateDocumentRequest.collection_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string document_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_document_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.CreateDocumentRequest.document_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.Document document = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.DocumentMask mask = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateDocumentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.CreateDocumentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (!this->_internal_parent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.CreateDocumentRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // string collection_id = 2;
  if (!this->_internal_collection_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collection_id().data(), static_cast<int>(this->_internal_collection_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.CreateDocumentRequest.collection_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collection_id(), target);
  }

  // string document_id = 3;
  if (!this->_internal_document_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_document_id().data(), static_cast<int>(this->_internal_document_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.CreateDocumentRequest.document_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_document_id(), target);
  }

  // .google.firestore.v1.Document document = 4;
  if (this->_internal_has_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::document(this), target, stream);
  }

  // .google.firestore.v1.DocumentMask mask = 5;
  if (this->_internal_has_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.CreateDocumentRequest)
  return target;
}

size_t CreateDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.CreateDocumentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (!this->_internal_parent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // string collection_id = 2;
  if (!this->_internal_collection_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collection_id());
  }

  // string document_id = 3;
  if (!this->_internal_document_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_document_id());
  }

  // .google.firestore.v1.Document document = 4;
  if (this->_internal_has_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_);
  }

  // .google.firestore.v1.DocumentMask mask = 5;
  if (this->_internal_has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateDocumentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateDocumentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateDocumentRequest::GetClassData() const { return &_class_data_; }

void CreateDocumentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateDocumentRequest *>(to)->MergeFrom(
      static_cast<const CreateDocumentRequest &>(from));
}


void CreateDocumentRequest::MergeFrom(const CreateDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.CreateDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent().empty()) {
    _internal_set_parent(from._internal_parent());
  }
  if (!from._internal_collection_id().empty()) {
    _internal_set_collection_id(from._internal_collection_id());
  }
  if (!from._internal_document_id().empty()) {
    _internal_set_document_id(from._internal_document_id());
  }
  if (from._internal_has_document()) {
    _internal_mutable_document()->::google::firestore::v1::Document::MergeFrom(from._internal_document());
  }
  if (from._internal_has_mask()) {
    _internal_mutable_mask()->::google::firestore::v1::DocumentMask::MergeFrom(from._internal_mask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateDocumentRequest::CopyFrom(const CreateDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.CreateDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDocumentRequest::IsInitialized() const {
  return true;
}

void CreateDocumentRequest::InternalSwap(CreateDocumentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parent_, lhs_arena,
      &other->parent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &collection_id_, lhs_arena,
      &other->collection_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &document_id_, lhs_arena,
      &other->document_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateDocumentRequest, mask_)
      + sizeof(CreateDocumentRequest::mask_)
      - PROTOBUF_FIELD_OFFSET(CreateDocumentRequest, document_)>(
          reinterpret_cast<char*>(&document_),
          reinterpret_cast<char*>(&other->document_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateDocumentRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[3]);
}

// ===================================================================

class UpdateDocumentRequest::_Internal {
 public:
  static const ::google::firestore::v1::Document& document(const UpdateDocumentRequest* msg);
  static const ::google::firestore::v1::DocumentMask& update_mask(const UpdateDocumentRequest* msg);
  static const ::google::firestore::v1::DocumentMask& mask(const UpdateDocumentRequest* msg);
  static const ::google::firestore::v1::Precondition& current_document(const UpdateDocumentRequest* msg);
};

const ::google::firestore::v1::Document&
UpdateDocumentRequest::_Internal::document(const UpdateDocumentRequest* msg) {
  return *msg->document_;
}
const ::google::firestore::v1::DocumentMask&
UpdateDocumentRequest::_Internal::update_mask(const UpdateDocumentRequest* msg) {
  return *msg->update_mask_;
}
const ::google::firestore::v1::DocumentMask&
UpdateDocumentRequest::_Internal::mask(const UpdateDocumentRequest* msg) {
  return *msg->mask_;
}
const ::google::firestore::v1::Precondition&
UpdateDocumentRequest::_Internal::current_document(const UpdateDocumentRequest* msg) {
  return *msg->current_document_;
}
void UpdateDocumentRequest::clear_document() {
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
void UpdateDocumentRequest::clear_update_mask() {
  if (GetArenaForAllocation() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
void UpdateDocumentRequest::clear_mask() {
  if (GetArenaForAllocation() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
void UpdateDocumentRequest::clear_current_document() {
  if (GetArenaForAllocation() == nullptr && current_document_ != nullptr) {
    delete current_document_;
  }
  current_document_ = nullptr;
}
UpdateDocumentRequest::UpdateDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.UpdateDocumentRequest)
}
UpdateDocumentRequest::UpdateDocumentRequest(const UpdateDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_document()) {
    document_ = new ::google::firestore::v1::Document(*from.document_);
  } else {
    document_ = nullptr;
  }
  if (from._internal_has_update_mask()) {
    update_mask_ = new ::google::firestore::v1::DocumentMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  if (from._internal_has_mask()) {
    mask_ = new ::google::firestore::v1::DocumentMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  if (from._internal_has_current_document()) {
    current_document_ = new ::google::firestore::v1::Precondition(*from.current_document_);
  } else {
    current_document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.UpdateDocumentRequest)
}

inline void UpdateDocumentRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&document_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_document_) -
    reinterpret_cast<char*>(&document_)) + sizeof(current_document_));
}

UpdateDocumentRequest::~UpdateDocumentRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.UpdateDocumentRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete document_;
  if (this != internal_default_instance()) delete update_mask_;
  if (this != internal_default_instance()) delete mask_;
  if (this != internal_default_instance()) delete current_document_;
}

void UpdateDocumentRequest::ArenaDtor(void* object) {
  UpdateDocumentRequest* _this = reinterpret_cast< UpdateDocumentRequest* >(object);
  (void)_this;
}
void UpdateDocumentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateDocumentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.UpdateDocumentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  if (GetArenaForAllocation() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  if (GetArenaForAllocation() == nullptr && current_document_ != nullptr) {
    delete current_document_;
  }
  current_document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateDocumentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.firestore.v1.Document document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.DocumentMask update_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.DocumentMask mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.Precondition current_document = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateDocumentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.UpdateDocumentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.Document document = 1;
  if (this->_internal_has_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::document(this), target, stream);
  }

  // .google.firestore.v1.DocumentMask update_mask = 2;
  if (this->_internal_has_update_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::update_mask(this), target, stream);
  }

  // .google.firestore.v1.DocumentMask mask = 3;
  if (this->_internal_has_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mask(this), target, stream);
  }

  // .google.firestore.v1.Precondition current_document = 4;
  if (this->_internal_has_current_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::current_document(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.UpdateDocumentRequest)
  return target;
}

size_t UpdateDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.UpdateDocumentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.firestore.v1.Document document = 1;
  if (this->_internal_has_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_);
  }

  // .google.firestore.v1.DocumentMask update_mask = 2;
  if (this->_internal_has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  // .google.firestore.v1.DocumentMask mask = 3;
  if (this->_internal_has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  // .google.firestore.v1.Precondition current_document = 4;
  if (this->_internal_has_current_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_document_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateDocumentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateDocumentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateDocumentRequest::GetClassData() const { return &_class_data_; }

void UpdateDocumentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateDocumentRequest *>(to)->MergeFrom(
      static_cast<const UpdateDocumentRequest &>(from));
}


void UpdateDocumentRequest::MergeFrom(const UpdateDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.UpdateDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_document()) {
    _internal_mutable_document()->::google::firestore::v1::Document::MergeFrom(from._internal_document());
  }
  if (from._internal_has_update_mask()) {
    _internal_mutable_update_mask()->::google::firestore::v1::DocumentMask::MergeFrom(from._internal_update_mask());
  }
  if (from._internal_has_mask()) {
    _internal_mutable_mask()->::google::firestore::v1::DocumentMask::MergeFrom(from._internal_mask());
  }
  if (from._internal_has_current_document()) {
    _internal_mutable_current_document()->::google::firestore::v1::Precondition::MergeFrom(from._internal_current_document());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateDocumentRequest::CopyFrom(const UpdateDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.UpdateDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDocumentRequest::IsInitialized() const {
  return true;
}

void UpdateDocumentRequest::InternalSwap(UpdateDocumentRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateDocumentRequest, current_document_)
      + sizeof(UpdateDocumentRequest::current_document_)
      - PROTOBUF_FIELD_OFFSET(UpdateDocumentRequest, document_)>(
          reinterpret_cast<char*>(&document_),
          reinterpret_cast<char*>(&other->document_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateDocumentRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[4]);
}

// ===================================================================

class DeleteDocumentRequest::_Internal {
 public:
  static const ::google::firestore::v1::Precondition& current_document(const DeleteDocumentRequest* msg);
};

const ::google::firestore::v1::Precondition&
DeleteDocumentRequest::_Internal::current_document(const DeleteDocumentRequest* msg) {
  return *msg->current_document_;
}
void DeleteDocumentRequest::clear_current_document() {
  if (GetArenaForAllocation() == nullptr && current_document_ != nullptr) {
    delete current_document_;
  }
  current_document_ = nullptr;
}
DeleteDocumentRequest::DeleteDocumentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.DeleteDocumentRequest)
}
DeleteDocumentRequest::DeleteDocumentRequest(const DeleteDocumentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_current_document()) {
    current_document_ = new ::google::firestore::v1::Precondition(*from.current_document_);
  } else {
    current_document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.DeleteDocumentRequest)
}

inline void DeleteDocumentRequest::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
current_document_ = nullptr;
}

DeleteDocumentRequest::~DeleteDocumentRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.DeleteDocumentRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteDocumentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete current_document_;
}

void DeleteDocumentRequest::ArenaDtor(void* object) {
  DeleteDocumentRequest* _this = reinterpret_cast< DeleteDocumentRequest* >(object);
  (void)_this;
}
void DeleteDocumentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDocumentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteDocumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.DeleteDocumentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && current_document_ != nullptr) {
    delete current_document_;
  }
  current_document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDocumentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.DeleteDocumentRequest.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.Precondition current_document = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteDocumentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.DeleteDocumentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.DeleteDocumentRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.firestore.v1.Precondition current_document = 2;
  if (this->_internal_has_current_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::current_document(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.DeleteDocumentRequest)
  return target;
}

size_t DeleteDocumentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.DeleteDocumentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.firestore.v1.Precondition current_document = 2;
  if (this->_internal_has_current_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_document_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteDocumentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteDocumentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteDocumentRequest::GetClassData() const { return &_class_data_; }

void DeleteDocumentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteDocumentRequest *>(to)->MergeFrom(
      static_cast<const DeleteDocumentRequest &>(from));
}


void DeleteDocumentRequest::MergeFrom(const DeleteDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.DeleteDocumentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_current_document()) {
    _internal_mutable_current_document()->::google::firestore::v1::Precondition::MergeFrom(from._internal_current_document());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteDocumentRequest::CopyFrom(const DeleteDocumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.DeleteDocumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDocumentRequest::IsInitialized() const {
  return true;
}

void DeleteDocumentRequest::InternalSwap(DeleteDocumentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(current_document_, other->current_document_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDocumentRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[5]);
}

// ===================================================================

class BatchGetDocumentsRequest::_Internal {
 public:
  static const ::google::firestore::v1::DocumentMask& mask(const BatchGetDocumentsRequest* msg);
  static const ::google::firestore::v1::TransactionOptions& new_transaction(const BatchGetDocumentsRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& read_time(const BatchGetDocumentsRequest* msg);
};

const ::google::firestore::v1::DocumentMask&
BatchGetDocumentsRequest::_Internal::mask(const BatchGetDocumentsRequest* msg) {
  return *msg->mask_;
}
const ::google::firestore::v1::TransactionOptions&
BatchGetDocumentsRequest::_Internal::new_transaction(const BatchGetDocumentsRequest* msg) {
  return *msg->consistency_selector_.new_transaction_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BatchGetDocumentsRequest::_Internal::read_time(const BatchGetDocumentsRequest* msg) {
  return *msg->consistency_selector_.read_time_;
}
void BatchGetDocumentsRequest::clear_mask() {
  if (GetArenaForAllocation() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
void BatchGetDocumentsRequest::set_allocated_new_transaction(::google::firestore::v1::TransactionOptions* new_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_consistency_selector();
  if (new_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_transaction));
    if (message_arena != submessage_arena) {
      new_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_transaction, submessage_arena);
    }
    set_has_new_transaction();
    consistency_selector_.new_transaction_ = new_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.BatchGetDocumentsRequest.new_transaction)
}
void BatchGetDocumentsRequest::clear_new_transaction() {
  if (_internal_has_new_transaction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete consistency_selector_.new_transaction_;
    }
    clear_has_consistency_selector();
  }
}
void BatchGetDocumentsRequest::set_allocated_read_time(::PROTOBUF_NAMESPACE_ID::Timestamp* read_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_consistency_selector();
  if (read_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_time));
    if (message_arena != submessage_arena) {
      read_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    set_has_read_time();
    consistency_selector_.read_time_ = read_time;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.BatchGetDocumentsRequest.read_time)
}
void BatchGetDocumentsRequest::clear_read_time() {
  if (_internal_has_read_time()) {
    if (GetArenaForAllocation() == nullptr) {
      delete consistency_selector_.read_time_;
    }
    clear_has_consistency_selector();
  }
}
BatchGetDocumentsRequest::BatchGetDocumentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  documents_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.BatchGetDocumentsRequest)
}
BatchGetDocumentsRequest::BatchGetDocumentsRequest(const BatchGetDocumentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      documents_(from.documents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  database_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    database_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_database().empty()) {
    database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_database(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_mask()) {
    mask_ = new ::google::firestore::v1::DocumentMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  clear_has_consistency_selector();
  switch (from.consistency_selector_case()) {
    case kTransaction: {
      _internal_set_transaction(from._internal_transaction());
      break;
    }
    case kNewTransaction: {
      _internal_mutable_new_transaction()->::google::firestore::v1::TransactionOptions::MergeFrom(from._internal_new_transaction());
      break;
    }
    case kReadTime: {
      _internal_mutable_read_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.BatchGetDocumentsRequest)
}

inline void BatchGetDocumentsRequest::SharedCtor() {
database_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  database_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mask_ = nullptr;
clear_has_consistency_selector();
}

BatchGetDocumentsRequest::~BatchGetDocumentsRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.BatchGetDocumentsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchGetDocumentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  database_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mask_;
  if (has_consistency_selector()) {
    clear_consistency_selector();
  }
}

void BatchGetDocumentsRequest::ArenaDtor(void* object) {
  BatchGetDocumentsRequest* _this = reinterpret_cast< BatchGetDocumentsRequest* >(object);
  (void)_this;
}
void BatchGetDocumentsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchGetDocumentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchGetDocumentsRequest::clear_consistency_selector() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.BatchGetDocumentsRequest)
  switch (consistency_selector_case()) {
    case kTransaction: {
      consistency_selector_.transaction_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kNewTransaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete consistency_selector_.new_transaction_;
      }
      break;
    }
    case kReadTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete consistency_selector_.read_time_;
      }
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONSISTENCY_SELECTOR_NOT_SET;
}


void BatchGetDocumentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.BatchGetDocumentsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  database_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  clear_consistency_selector();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchGetDocumentsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string database = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_database();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.BatchGetDocumentsRequest.database"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string documents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_documents();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.BatchGetDocumentsRequest.documents"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.DocumentMask mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes transaction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.TransactionOptions new_transaction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp read_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchGetDocumentsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.BatchGetDocumentsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (!this->_internal_database().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_database().data(), static_cast<int>(this->_internal_database().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.BatchGetDocumentsRequest.database");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_database(), target);
  }

  // repeated string documents = 2;
  for (int i = 0, n = this->_internal_documents_size(); i < n; i++) {
    const auto& s = this->_internal_documents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.BatchGetDocumentsRequest.documents");
    target = stream->WriteString(2, s, target);
  }

  // .google.firestore.v1.DocumentMask mask = 3;
  if (this->_internal_has_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mask(this), target, stream);
  }

  // bytes transaction = 4;
  if (_internal_has_transaction()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_transaction(), target);
  }

  // .google.firestore.v1.TransactionOptions new_transaction = 5;
  if (_internal_has_new_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::new_transaction(this), target, stream);
  }

  // .google.protobuf.Timestamp read_time = 7;
  if (_internal_has_read_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::read_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.BatchGetDocumentsRequest)
  return target;
}

size_t BatchGetDocumentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.BatchGetDocumentsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string documents = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(documents_.size());
  for (int i = 0, n = documents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      documents_.Get(i));
  }

  // string database = 1;
  if (!this->_internal_database().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_database());
  }

  // .google.firestore.v1.DocumentMask mask = 3;
  if (this->_internal_has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  switch (consistency_selector_case()) {
    // bytes transaction = 4;
    case kTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_transaction());
      break;
    }
    // .google.firestore.v1.TransactionOptions new_transaction = 5;
    case kNewTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consistency_selector_.new_transaction_);
      break;
    }
    // .google.protobuf.Timestamp read_time = 7;
    case kReadTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consistency_selector_.read_time_);
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchGetDocumentsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchGetDocumentsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchGetDocumentsRequest::GetClassData() const { return &_class_data_; }

void BatchGetDocumentsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchGetDocumentsRequest *>(to)->MergeFrom(
      static_cast<const BatchGetDocumentsRequest &>(from));
}


void BatchGetDocumentsRequest::MergeFrom(const BatchGetDocumentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.BatchGetDocumentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
  if (!from._internal_database().empty()) {
    _internal_set_database(from._internal_database());
  }
  if (from._internal_has_mask()) {
    _internal_mutable_mask()->::google::firestore::v1::DocumentMask::MergeFrom(from._internal_mask());
  }
  switch (from.consistency_selector_case()) {
    case kTransaction: {
      _internal_set_transaction(from._internal_transaction());
      break;
    }
    case kNewTransaction: {
      _internal_mutable_new_transaction()->::google::firestore::v1::TransactionOptions::MergeFrom(from._internal_new_transaction());
      break;
    }
    case kReadTime: {
      _internal_mutable_read_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchGetDocumentsRequest::CopyFrom(const BatchGetDocumentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.BatchGetDocumentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetDocumentsRequest::IsInitialized() const {
  return true;
}

void BatchGetDocumentsRequest::InternalSwap(BatchGetDocumentsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  documents_.InternalSwap(&other->documents_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &database_, lhs_arena,
      &other->database_, rhs_arena
  );
  swap(mask_, other->mask_);
  swap(consistency_selector_, other->consistency_selector_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchGetDocumentsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[6]);
}

// ===================================================================

class BatchGetDocumentsResponse::_Internal {
 public:
  static const ::google::firestore::v1::Document& found(const BatchGetDocumentsResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& read_time(const BatchGetDocumentsResponse* msg);
};

const ::google::firestore::v1::Document&
BatchGetDocumentsResponse::_Internal::found(const BatchGetDocumentsResponse* msg) {
  return *msg->result_.found_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BatchGetDocumentsResponse::_Internal::read_time(const BatchGetDocumentsResponse* msg) {
  return *msg->read_time_;
}
void BatchGetDocumentsResponse::set_allocated_found(::google::firestore::v1::Document* found) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (found) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(found));
    if (message_arena != submessage_arena) {
      found = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, found, submessage_arena);
    }
    set_has_found();
    result_.found_ = found;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.BatchGetDocumentsResponse.found)
}
void BatchGetDocumentsResponse::clear_found() {
  if (_internal_has_found()) {
    if (GetArenaForAllocation() == nullptr) {
      delete result_.found_;
    }
    clear_has_result();
  }
}
void BatchGetDocumentsResponse::clear_read_time() {
  if (GetArenaForAllocation() == nullptr && read_time_ != nullptr) {
    delete read_time_;
  }
  read_time_ = nullptr;
}
BatchGetDocumentsResponse::BatchGetDocumentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.BatchGetDocumentsResponse)
}
BatchGetDocumentsResponse::BatchGetDocumentsResponse(const BatchGetDocumentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transaction().empty()) {
    transaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_read_time()) {
    read_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.read_time_);
  } else {
    read_time_ = nullptr;
  }
  clear_has_result();
  switch (from.result_case()) {
    case kFound: {
      _internal_mutable_found()->::google::firestore::v1::Document::MergeFrom(from._internal_found());
      break;
    }
    case kMissing: {
      _internal_set_missing(from._internal_missing());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.BatchGetDocumentsResponse)
}

inline void BatchGetDocumentsResponse::SharedCtor() {
transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
read_time_ = nullptr;
clear_has_result();
}

BatchGetDocumentsResponse::~BatchGetDocumentsResponse() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.BatchGetDocumentsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchGetDocumentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete read_time_;
  if (has_result()) {
    clear_result();
  }
}

void BatchGetDocumentsResponse::ArenaDtor(void* object) {
  BatchGetDocumentsResponse* _this = reinterpret_cast< BatchGetDocumentsResponse* >(object);
  (void)_this;
}
void BatchGetDocumentsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchGetDocumentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchGetDocumentsResponse::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.BatchGetDocumentsResponse)
  switch (result_case()) {
    case kFound: {
      if (GetArenaForAllocation() == nullptr) {
        delete result_.found_;
      }
      break;
    }
    case kMissing: {
      result_.missing_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void BatchGetDocumentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.BatchGetDocumentsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && read_time_ != nullptr) {
    delete read_time_;
  }
  read_time_ = nullptr;
  clear_result();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchGetDocumentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.firestore.v1.Document found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_found(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string missing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_missing();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.BatchGetDocumentsResponse.missing"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes transaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp read_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchGetDocumentsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.BatchGetDocumentsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.Document found = 1;
  if (_internal_has_found()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::found(this), target, stream);
  }

  // string missing = 2;
  if (_internal_has_missing()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_missing().data(), static_cast<int>(this->_internal_missing().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.BatchGetDocumentsResponse.missing");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_missing(), target);
  }

  // bytes transaction = 3;
  if (!this->_internal_transaction().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_transaction(), target);
  }

  // .google.protobuf.Timestamp read_time = 4;
  if (this->_internal_has_read_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::read_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.BatchGetDocumentsResponse)
  return target;
}

size_t BatchGetDocumentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.BatchGetDocumentsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transaction = 3;
  if (!this->_internal_transaction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction());
  }

  // .google.protobuf.Timestamp read_time = 4;
  if (this->_internal_has_read_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_time_);
  }

  switch (result_case()) {
    // .google.firestore.v1.Document found = 1;
    case kFound: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.found_);
      break;
    }
    // string missing = 2;
    case kMissing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_missing());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchGetDocumentsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchGetDocumentsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchGetDocumentsResponse::GetClassData() const { return &_class_data_; }

void BatchGetDocumentsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchGetDocumentsResponse *>(to)->MergeFrom(
      static_cast<const BatchGetDocumentsResponse &>(from));
}


void BatchGetDocumentsResponse::MergeFrom(const BatchGetDocumentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.BatchGetDocumentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transaction().empty()) {
    _internal_set_transaction(from._internal_transaction());
  }
  if (from._internal_has_read_time()) {
    _internal_mutable_read_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_read_time());
  }
  switch (from.result_case()) {
    case kFound: {
      _internal_mutable_found()->::google::firestore::v1::Document::MergeFrom(from._internal_found());
      break;
    }
    case kMissing: {
      _internal_set_missing(from._internal_missing());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchGetDocumentsResponse::CopyFrom(const BatchGetDocumentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.BatchGetDocumentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetDocumentsResponse::IsInitialized() const {
  return true;
}

void BatchGetDocumentsResponse::InternalSwap(BatchGetDocumentsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_, lhs_arena,
      &other->transaction_, rhs_arena
  );
  swap(read_time_, other->read_time_);
  swap(result_, other->result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchGetDocumentsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[7]);
}

// ===================================================================

class BeginTransactionRequest::_Internal {
 public:
  static const ::google::firestore::v1::TransactionOptions& options(const BeginTransactionRequest* msg);
};

const ::google::firestore::v1::TransactionOptions&
BeginTransactionRequest::_Internal::options(const BeginTransactionRequest* msg) {
  return *msg->options_;
}
void BeginTransactionRequest::clear_options() {
  if (GetArenaForAllocation() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
BeginTransactionRequest::BeginTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.BeginTransactionRequest)
}
BeginTransactionRequest::BeginTransactionRequest(const BeginTransactionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  database_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    database_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_database().empty()) {
    database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_database(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_options()) {
    options_ = new ::google::firestore::v1::TransactionOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.BeginTransactionRequest)
}

inline void BeginTransactionRequest::SharedCtor() {
database_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  database_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
options_ = nullptr;
}

BeginTransactionRequest::~BeginTransactionRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.BeginTransactionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BeginTransactionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  database_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void BeginTransactionRequest::ArenaDtor(void* object) {
  BeginTransactionRequest* _this = reinterpret_cast< BeginTransactionRequest* >(object);
  (void)_this;
}
void BeginTransactionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BeginTransactionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BeginTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.BeginTransactionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  database_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeginTransactionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string database = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_database();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.BeginTransactionRequest.database"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.TransactionOptions options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BeginTransactionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.BeginTransactionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (!this->_internal_database().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_database().data(), static_cast<int>(this->_internal_database().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.BeginTransactionRequest.database");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_database(), target);
  }

  // .google.firestore.v1.TransactionOptions options = 2;
  if (this->_internal_has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.BeginTransactionRequest)
  return target;
}

size_t BeginTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.BeginTransactionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string database = 1;
  if (!this->_internal_database().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_database());
  }

  // .google.firestore.v1.TransactionOptions options = 2;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BeginTransactionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BeginTransactionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BeginTransactionRequest::GetClassData() const { return &_class_data_; }

void BeginTransactionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BeginTransactionRequest *>(to)->MergeFrom(
      static_cast<const BeginTransactionRequest &>(from));
}


void BeginTransactionRequest::MergeFrom(const BeginTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.BeginTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_database().empty()) {
    _internal_set_database(from._internal_database());
  }
  if (from._internal_has_options()) {
    _internal_mutable_options()->::google::firestore::v1::TransactionOptions::MergeFrom(from._internal_options());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BeginTransactionRequest::CopyFrom(const BeginTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.BeginTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginTransactionRequest::IsInitialized() const {
  return true;
}

void BeginTransactionRequest::InternalSwap(BeginTransactionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &database_, lhs_arena,
      &other->database_, rhs_arena
  );
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BeginTransactionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[8]);
}

// ===================================================================

class BeginTransactionResponse::_Internal {
 public:
};

BeginTransactionResponse::BeginTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.BeginTransactionResponse)
}
BeginTransactionResponse::BeginTransactionResponse(const BeginTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transaction().empty()) {
    transaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.BeginTransactionResponse)
}

inline void BeginTransactionResponse::SharedCtor() {
transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BeginTransactionResponse::~BeginTransactionResponse() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.BeginTransactionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BeginTransactionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BeginTransactionResponse::ArenaDtor(void* object) {
  BeginTransactionResponse* _this = reinterpret_cast< BeginTransactionResponse* >(object);
  (void)_this;
}
void BeginTransactionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BeginTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BeginTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.BeginTransactionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BeginTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BeginTransactionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.BeginTransactionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transaction = 1;
  if (!this->_internal_transaction().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_transaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.BeginTransactionResponse)
  return target;
}

size_t BeginTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.BeginTransactionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transaction = 1;
  if (!this->_internal_transaction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BeginTransactionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BeginTransactionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BeginTransactionResponse::GetClassData() const { return &_class_data_; }

void BeginTransactionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BeginTransactionResponse *>(to)->MergeFrom(
      static_cast<const BeginTransactionResponse &>(from));
}


void BeginTransactionResponse::MergeFrom(const BeginTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.BeginTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transaction().empty()) {
    _internal_set_transaction(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BeginTransactionResponse::CopyFrom(const BeginTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.BeginTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginTransactionResponse::IsInitialized() const {
  return true;
}

void BeginTransactionResponse::InternalSwap(BeginTransactionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_, lhs_arena,
      &other->transaction_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BeginTransactionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[9]);
}

// ===================================================================

class CommitRequest::_Internal {
 public:
};

void CommitRequest::clear_writes() {
  writes_.Clear();
}
CommitRequest::CommitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  writes_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.CommitRequest)
}
CommitRequest::CommitRequest(const CommitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      writes_(from.writes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  database_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    database_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_database().empty()) {
    database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_database(), 
      GetArenaForAllocation());
  }
  transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transaction().empty()) {
    transaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.CommitRequest)
}

inline void CommitRequest::SharedCtor() {
database_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  database_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommitRequest::~CommitRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.CommitRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommitRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  database_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommitRequest::ArenaDtor(void* object) {
  CommitRequest* _this = reinterpret_cast< CommitRequest* >(object);
  (void)_this;
}
void CommitRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.CommitRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  writes_.Clear();
  database_.ClearToEmpty();
  transaction_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string database = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_database();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.CommitRequest.database"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.firestore.v1.Write writes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_writes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes transaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommitRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.CommitRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (!this->_internal_database().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_database().data(), static_cast<int>(this->_internal_database().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.CommitRequest.database");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_database(), target);
  }

  // repeated .google.firestore.v1.Write writes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_writes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_writes(i), target, stream);
  }

  // bytes transaction = 3;
  if (!this->_internal_transaction().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_transaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.CommitRequest)
  return target;
}

size_t CommitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.CommitRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.firestore.v1.Write writes = 2;
  total_size += 1UL * this->_internal_writes_size();
  for (const auto& msg : this->writes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string database = 1;
  if (!this->_internal_database().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_database());
  }

  // bytes transaction = 3;
  if (!this->_internal_transaction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommitRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitRequest::GetClassData() const { return &_class_data_; }

void CommitRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommitRequest *>(to)->MergeFrom(
      static_cast<const CommitRequest &>(from));
}


void CommitRequest::MergeFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.CommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  writes_.MergeFrom(from.writes_);
  if (!from._internal_database().empty()) {
    _internal_set_database(from._internal_database());
  }
  if (!from._internal_transaction().empty()) {
    _internal_set_transaction(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommitRequest::CopyFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitRequest::IsInitialized() const {
  return true;
}

void CommitRequest::InternalSwap(CommitRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  writes_.InternalSwap(&other->writes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &database_, lhs_arena,
      &other->database_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_, lhs_arena,
      &other->transaction_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[10]);
}

// ===================================================================

class CommitResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& commit_time(const CommitResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CommitResponse::_Internal::commit_time(const CommitResponse* msg) {
  return *msg->commit_time_;
}
void CommitResponse::clear_write_results() {
  write_results_.Clear();
}
void CommitResponse::clear_commit_time() {
  if (GetArenaForAllocation() == nullptr && commit_time_ != nullptr) {
    delete commit_time_;
  }
  commit_time_ = nullptr;
}
CommitResponse::CommitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  write_results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.CommitResponse)
}
CommitResponse::CommitResponse(const CommitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      write_results_(from.write_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_commit_time()) {
    commit_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.commit_time_);
  } else {
    commit_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.CommitResponse)
}

inline void CommitResponse::SharedCtor() {
commit_time_ = nullptr;
}

CommitResponse::~CommitResponse() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.CommitResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CommitResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete commit_time_;
}

void CommitResponse::ArenaDtor(void* object) {
  CommitResponse* _this = reinterpret_cast< CommitResponse* >(object);
  (void)_this;
}
void CommitResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.CommitResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  write_results_.Clear();
  if (GetArenaForAllocation() == nullptr && commit_time_ != nullptr) {
    delete commit_time_;
  }
  commit_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.firestore.v1.WriteResult write_results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_write_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp commit_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommitResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.CommitResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.firestore.v1.WriteResult write_results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_write_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_write_results(i), target, stream);
  }

  // .google.protobuf.Timestamp commit_time = 2;
  if (this->_internal_has_commit_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::commit_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.CommitResponse)
  return target;
}

size_t CommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.CommitResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.firestore.v1.WriteResult write_results = 1;
  total_size += 1UL * this->_internal_write_results_size();
  for (const auto& msg : this->write_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp commit_time = 2;
  if (this->_internal_has_commit_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commit_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CommitResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitResponse::GetClassData() const { return &_class_data_; }

void CommitResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CommitResponse *>(to)->MergeFrom(
      static_cast<const CommitResponse &>(from));
}


void CommitResponse::MergeFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.CommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  write_results_.MergeFrom(from.write_results_);
  if (from._internal_has_commit_time()) {
    _internal_mutable_commit_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_commit_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse::IsInitialized() const {
  return true;
}

void CommitResponse::InternalSwap(CommitResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  write_results_.InternalSwap(&other->write_results_);
  swap(commit_time_, other->commit_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[11]);
}

// ===================================================================

class RollbackRequest::_Internal {
 public:
};

RollbackRequest::RollbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.RollbackRequest)
}
RollbackRequest::RollbackRequest(const RollbackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  database_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    database_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_database().empty()) {
    database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_database(), 
      GetArenaForAllocation());
  }
  transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transaction().empty()) {
    transaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.RollbackRequest)
}

inline void RollbackRequest::SharedCtor() {
database_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  database_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RollbackRequest::~RollbackRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.RollbackRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RollbackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  database_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RollbackRequest::ArenaDtor(void* object) {
  RollbackRequest* _this = reinterpret_cast< RollbackRequest* >(object);
  (void)_this;
}
void RollbackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RollbackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RollbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.RollbackRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  database_.ClearToEmpty();
  transaction_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RollbackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string database = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_database();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.RollbackRequest.database"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes transaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RollbackRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.RollbackRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (!this->_internal_database().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_database().data(), static_cast<int>(this->_internal_database().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.RollbackRequest.database");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_database(), target);
  }

  // bytes transaction = 2;
  if (!this->_internal_transaction().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_transaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.RollbackRequest)
  return target;
}

size_t RollbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.RollbackRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string database = 1;
  if (!this->_internal_database().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_database());
  }

  // bytes transaction = 2;
  if (!this->_internal_transaction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RollbackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RollbackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RollbackRequest::GetClassData() const { return &_class_data_; }

void RollbackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RollbackRequest *>(to)->MergeFrom(
      static_cast<const RollbackRequest &>(from));
}


void RollbackRequest::MergeFrom(const RollbackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.RollbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_database().empty()) {
    _internal_set_database(from._internal_database());
  }
  if (!from._internal_transaction().empty()) {
    _internal_set_transaction(from._internal_transaction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RollbackRequest::CopyFrom(const RollbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.RollbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollbackRequest::IsInitialized() const {
  return true;
}

void RollbackRequest::InternalSwap(RollbackRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &database_, lhs_arena,
      &other->database_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_, lhs_arena,
      &other->transaction_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RollbackRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[12]);
}

// ===================================================================

class RunQueryRequest::_Internal {
 public:
  static const ::google::firestore::v1::StructuredQuery& structured_query(const RunQueryRequest* msg);
  static const ::google::firestore::v1::TransactionOptions& new_transaction(const RunQueryRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& read_time(const RunQueryRequest* msg);
};

const ::google::firestore::v1::StructuredQuery&
RunQueryRequest::_Internal::structured_query(const RunQueryRequest* msg) {
  return *msg->query_type_.structured_query_;
}
const ::google::firestore::v1::TransactionOptions&
RunQueryRequest::_Internal::new_transaction(const RunQueryRequest* msg) {
  return *msg->consistency_selector_.new_transaction_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RunQueryRequest::_Internal::read_time(const RunQueryRequest* msg) {
  return *msg->consistency_selector_.read_time_;
}
void RunQueryRequest::set_allocated_structured_query(::google::firestore::v1::StructuredQuery* structured_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query_type();
  if (structured_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(structured_query));
    if (message_arena != submessage_arena) {
      structured_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, structured_query, submessage_arena);
    }
    set_has_structured_query();
    query_type_.structured_query_ = structured_query;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.RunQueryRequest.structured_query)
}
void RunQueryRequest::clear_structured_query() {
  if (_internal_has_structured_query()) {
    if (GetArenaForAllocation() == nullptr) {
      delete query_type_.structured_query_;
    }
    clear_has_query_type();
  }
}
void RunQueryRequest::set_allocated_new_transaction(::google::firestore::v1::TransactionOptions* new_transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_consistency_selector();
  if (new_transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_transaction));
    if (message_arena != submessage_arena) {
      new_transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_transaction, submessage_arena);
    }
    set_has_new_transaction();
    consistency_selector_.new_transaction_ = new_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.RunQueryRequest.new_transaction)
}
void RunQueryRequest::clear_new_transaction() {
  if (_internal_has_new_transaction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete consistency_selector_.new_transaction_;
    }
    clear_has_consistency_selector();
  }
}
void RunQueryRequest::set_allocated_read_time(::PROTOBUF_NAMESPACE_ID::Timestamp* read_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_consistency_selector();
  if (read_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_time));
    if (message_arena != submessage_arena) {
      read_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    set_has_read_time();
    consistency_selector_.read_time_ = read_time;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.RunQueryRequest.read_time)
}
void RunQueryRequest::clear_read_time() {
  if (_internal_has_read_time()) {
    if (GetArenaForAllocation() == nullptr) {
      delete consistency_selector_.read_time_;
    }
    clear_has_consistency_selector();
  }
}
RunQueryRequest::RunQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.RunQueryRequest)
}
RunQueryRequest::RunQueryRequest(const RunQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent().empty()) {
    parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent(), 
      GetArenaForAllocation());
  }
  clear_has_query_type();
  switch (from.query_type_case()) {
    case kStructuredQuery: {
      _internal_mutable_structured_query()->::google::firestore::v1::StructuredQuery::MergeFrom(from._internal_structured_query());
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  clear_has_consistency_selector();
  switch (from.consistency_selector_case()) {
    case kTransaction: {
      _internal_set_transaction(from._internal_transaction());
      break;
    }
    case kNewTransaction: {
      _internal_mutable_new_transaction()->::google::firestore::v1::TransactionOptions::MergeFrom(from._internal_new_transaction());
      break;
    }
    case kReadTime: {
      _internal_mutable_read_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.RunQueryRequest)
}

inline void RunQueryRequest::SharedCtor() {
parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_query_type();
clear_has_consistency_selector();
}

RunQueryRequest::~RunQueryRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.RunQueryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RunQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_query_type()) {
    clear_query_type();
  }
  if (has_consistency_selector()) {
    clear_consistency_selector();
  }
}

void RunQueryRequest::ArenaDtor(void* object) {
  RunQueryRequest* _this = reinterpret_cast< RunQueryRequest* >(object);
  (void)_this;
}
void RunQueryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RunQueryRequest::clear_query_type() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.RunQueryRequest)
  switch (query_type_case()) {
    case kStructuredQuery: {
      if (GetArenaForAllocation() == nullptr) {
        delete query_type_.structured_query_;
      }
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QUERY_TYPE_NOT_SET;
}

void RunQueryRequest::clear_consistency_selector() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.RunQueryRequest)
  switch (consistency_selector_case()) {
    case kTransaction: {
      consistency_selector_.transaction_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kNewTransaction: {
      if (GetArenaForAllocation() == nullptr) {
        delete consistency_selector_.new_transaction_;
      }
      break;
    }
    case kReadTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete consistency_selector_.read_time_;
      }
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = CONSISTENCY_SELECTOR_NOT_SET;
}


void RunQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.RunQueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty();
  clear_query_type();
  clear_consistency_selector();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunQueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.RunQueryRequest.parent"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.StructuredQuery structured_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_structured_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes transaction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.TransactionOptions new_transaction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp read_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunQueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.RunQueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (!this->_internal_parent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.RunQueryRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // .google.firestore.v1.StructuredQuery structured_query = 2;
  if (_internal_has_structured_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::structured_query(this), target, stream);
  }

  // bytes transaction = 5;
  if (_internal_has_transaction()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_transaction(), target);
  }

  // .google.firestore.v1.TransactionOptions new_transaction = 6;
  if (_internal_has_new_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::new_transaction(this), target, stream);
  }

  // .google.protobuf.Timestamp read_time = 7;
  if (_internal_has_read_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::read_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.RunQueryRequest)
  return target;
}

size_t RunQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.RunQueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (!this->_internal_parent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  switch (query_type_case()) {
    // .google.firestore.v1.StructuredQuery structured_query = 2;
    case kStructuredQuery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_type_.structured_query_);
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  switch (consistency_selector_case()) {
    // bytes transaction = 5;
    case kTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_transaction());
      break;
    }
    // .google.firestore.v1.TransactionOptions new_transaction = 6;
    case kNewTransaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consistency_selector_.new_transaction_);
      break;
    }
    // .google.protobuf.Timestamp read_time = 7;
    case kReadTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *consistency_selector_.read_time_);
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunQueryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RunQueryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunQueryRequest::GetClassData() const { return &_class_data_; }

void RunQueryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RunQueryRequest *>(to)->MergeFrom(
      static_cast<const RunQueryRequest &>(from));
}


void RunQueryRequest::MergeFrom(const RunQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.RunQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent().empty()) {
    _internal_set_parent(from._internal_parent());
  }
  switch (from.query_type_case()) {
    case kStructuredQuery: {
      _internal_mutable_structured_query()->::google::firestore::v1::StructuredQuery::MergeFrom(from._internal_structured_query());
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.consistency_selector_case()) {
    case kTransaction: {
      _internal_set_transaction(from._internal_transaction());
      break;
    }
    case kNewTransaction: {
      _internal_mutable_new_transaction()->::google::firestore::v1::TransactionOptions::MergeFrom(from._internal_new_transaction());
      break;
    }
    case kReadTime: {
      _internal_mutable_read_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_read_time());
      break;
    }
    case CONSISTENCY_SELECTOR_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunQueryRequest::CopyFrom(const RunQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.RunQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunQueryRequest::IsInitialized() const {
  return true;
}

void RunQueryRequest::InternalSwap(RunQueryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parent_, lhs_arena,
      &other->parent_, rhs_arena
  );
  swap(query_type_, other->query_type_);
  swap(consistency_selector_, other->consistency_selector_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunQueryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[13]);
}

// ===================================================================

class RunQueryResponse::_Internal {
 public:
  static const ::google::firestore::v1::Document& document(const RunQueryResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& read_time(const RunQueryResponse* msg);
};

const ::google::firestore::v1::Document&
RunQueryResponse::_Internal::document(const RunQueryResponse* msg) {
  return *msg->document_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RunQueryResponse::_Internal::read_time(const RunQueryResponse* msg) {
  return *msg->read_time_;
}
void RunQueryResponse::clear_document() {
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
}
void RunQueryResponse::clear_read_time() {
  if (GetArenaForAllocation() == nullptr && read_time_ != nullptr) {
    delete read_time_;
  }
  read_time_ = nullptr;
}
RunQueryResponse::RunQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.RunQueryResponse)
}
RunQueryResponse::RunQueryResponse(const RunQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transaction().empty()) {
    transaction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_document()) {
    document_ = new ::google::firestore::v1::Document(*from.document_);
  } else {
    document_ = nullptr;
  }
  if (from._internal_has_read_time()) {
    read_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.read_time_);
  } else {
    read_time_ = nullptr;
  }
  skipped_results_ = from.skipped_results_;
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.RunQueryResponse)
}

inline void RunQueryResponse::SharedCtor() {
transaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transaction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&document_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&skipped_results_) -
    reinterpret_cast<char*>(&document_)) + sizeof(skipped_results_));
}

RunQueryResponse::~RunQueryResponse() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.RunQueryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RunQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete document_;
  if (this != internal_default_instance()) delete read_time_;
}

void RunQueryResponse::ArenaDtor(void* object) {
  RunQueryResponse* _this = reinterpret_cast< RunQueryResponse* >(object);
  (void)_this;
}
void RunQueryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RunQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RunQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.RunQueryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_time_ != nullptr) {
    delete read_time_;
  }
  read_time_ = nullptr;
  skipped_results_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunQueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.firestore.v1.Document document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes transaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_transaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp read_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 skipped_results = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          skipped_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunQueryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.RunQueryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.Document document = 1;
  if (this->_internal_has_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::document(this), target, stream);
  }

  // bytes transaction = 2;
  if (!this->_internal_transaction().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_transaction(), target);
  }

  // .google.protobuf.Timestamp read_time = 3;
  if (this->_internal_has_read_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::read_time(this), target, stream);
  }

  // int32 skipped_results = 4;
  if (this->_internal_skipped_results() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_skipped_results(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.RunQueryResponse)
  return target;
}

size_t RunQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.RunQueryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes transaction = 2;
  if (!this->_internal_transaction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_transaction());
  }

  // .google.firestore.v1.Document document = 1;
  if (this->_internal_has_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_);
  }

  // .google.protobuf.Timestamp read_time = 3;
  if (this->_internal_has_read_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_time_);
  }

  // int32 skipped_results = 4;
  if (this->_internal_skipped_results() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_skipped_results());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunQueryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RunQueryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunQueryResponse::GetClassData() const { return &_class_data_; }

void RunQueryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RunQueryResponse *>(to)->MergeFrom(
      static_cast<const RunQueryResponse &>(from));
}


void RunQueryResponse::MergeFrom(const RunQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.RunQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transaction().empty()) {
    _internal_set_transaction(from._internal_transaction());
  }
  if (from._internal_has_document()) {
    _internal_mutable_document()->::google::firestore::v1::Document::MergeFrom(from._internal_document());
  }
  if (from._internal_has_read_time()) {
    _internal_mutable_read_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_read_time());
  }
  if (from._internal_skipped_results() != 0) {
    _internal_set_skipped_results(from._internal_skipped_results());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunQueryResponse::CopyFrom(const RunQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.RunQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunQueryResponse::IsInitialized() const {
  return true;
}

void RunQueryResponse::InternalSwap(RunQueryResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_, lhs_arena,
      &other->transaction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunQueryResponse, skipped_results_)
      + sizeof(RunQueryResponse::skipped_results_)
      - PROTOBUF_FIELD_OFFSET(RunQueryResponse, document_)>(
          reinterpret_cast<char*>(&document_),
          reinterpret_cast<char*>(&other->document_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunQueryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[14]);
}

// ===================================================================

WriteRequest_LabelsEntry_DoNotUse::WriteRequest_LabelsEntry_DoNotUse() {}
WriteRequest_LabelsEntry_DoNotUse::WriteRequest_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WriteRequest_LabelsEntry_DoNotUse::MergeFrom(const WriteRequest_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WriteRequest_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[15]);
}

// ===================================================================

class WriteRequest::_Internal {
 public:
};

void WriteRequest::clear_writes() {
  writes_.Clear();
}
WriteRequest::WriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  writes_(arena),
  labels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.WriteRequest)
}
WriteRequest::WriteRequest(const WriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      writes_(from.writes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  database_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    database_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_database().empty()) {
    database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_database(), 
      GetArenaForAllocation());
  }
  stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stream_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream_id().empty()) {
    stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stream_id(), 
      GetArenaForAllocation());
  }
  stream_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stream_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream_token().empty()) {
    stream_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stream_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.WriteRequest)
}

inline void WriteRequest::SharedCtor() {
database_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  database_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stream_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stream_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stream_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WriteRequest::~WriteRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.WriteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  database_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stream_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stream_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteRequest::ArenaDtor(void* object) {
  WriteRequest* _this = reinterpret_cast< WriteRequest* >(object);
  (void)_this;
  _this->labels_. ~MapField();
}
inline void WriteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &WriteRequest::ArenaDtor);
  }
}
void WriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.WriteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  writes_.Clear();
  labels_.Clear();
  database_.ClearToEmpty();
  stream_id_.ClearToEmpty();
  stream_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string database = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_database();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.WriteRequest.database"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stream_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.WriteRequest.stream_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.firestore.v1.Write writes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_writes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes stream_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_stream_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> labels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.WriteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (!this->_internal_database().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_database().data(), static_cast<int>(this->_internal_database().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.WriteRequest.database");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_database(), target);
  }

  // string stream_id = 2;
  if (!this->_internal_stream_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.WriteRequest.stream_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_stream_id(), target);
  }

  // repeated .google.firestore.v1.Write writes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_writes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_writes(i), target, stream);
  }

  // bytes stream_token = 4;
  if (!this->_internal_stream_token().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_stream_token(), target);
  }

  // map<string, string> labels = 5;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.firestore.v1.WriteRequest.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.firestore.v1.WriteRequest.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = WriteRequest_LabelsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = WriteRequest_LabelsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.WriteRequest)
  return target;
}

size_t WriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.WriteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.firestore.v1.Write writes = 3;
  total_size += 1UL * this->_internal_writes_size();
  for (const auto& msg : this->writes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> labels = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += WriteRequest_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string database = 1;
  if (!this->_internal_database().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_database());
  }

  // string stream_id = 2;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  // bytes stream_token = 4;
  if (!this->_internal_stream_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stream_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteRequest::GetClassData() const { return &_class_data_; }

void WriteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteRequest *>(to)->MergeFrom(
      static_cast<const WriteRequest &>(from));
}


void WriteRequest::MergeFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.WriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  writes_.MergeFrom(from.writes_);
  labels_.MergeFrom(from.labels_);
  if (!from._internal_database().empty()) {
    _internal_set_database(from._internal_database());
  }
  if (!from._internal_stream_id().empty()) {
    _internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_stream_token().empty()) {
    _internal_set_stream_token(from._internal_stream_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteRequest::CopyFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRequest::IsInitialized() const {
  return true;
}

void WriteRequest::InternalSwap(WriteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  writes_.InternalSwap(&other->writes_);
  labels_.InternalSwap(&other->labels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &database_, lhs_arena,
      &other->database_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stream_id_, lhs_arena,
      &other->stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stream_token_, lhs_arena,
      &other->stream_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[16]);
}

// ===================================================================

class WriteResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& commit_time(const WriteResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
WriteResponse::_Internal::commit_time(const WriteResponse* msg) {
  return *msg->commit_time_;
}
void WriteResponse::clear_write_results() {
  write_results_.Clear();
}
void WriteResponse::clear_commit_time() {
  if (GetArenaForAllocation() == nullptr && commit_time_ != nullptr) {
    delete commit_time_;
  }
  commit_time_ = nullptr;
}
WriteResponse::WriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  write_results_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.WriteResponse)
}
WriteResponse::WriteResponse(const WriteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      write_results_(from.write_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stream_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream_id().empty()) {
    stream_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stream_id(), 
      GetArenaForAllocation());
  }
  stream_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stream_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream_token().empty()) {
    stream_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stream_token(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_commit_time()) {
    commit_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.commit_time_);
  } else {
    commit_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.WriteResponse)
}

inline void WriteResponse::SharedCtor() {
stream_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stream_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
stream_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stream_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
commit_time_ = nullptr;
}

WriteResponse::~WriteResponse() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.WriteResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stream_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stream_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete commit_time_;
}

void WriteResponse::ArenaDtor(void* object) {
  WriteResponse* _this = reinterpret_cast< WriteResponse* >(object);
  (void)_this;
}
void WriteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.WriteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  write_results_.Clear();
  stream_id_.ClearToEmpty();
  stream_token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && commit_time_ != nullptr) {
    delete commit_time_;
  }
  commit_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stream_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stream_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.WriteResponse.stream_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes stream_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stream_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.firestore.v1.WriteResult write_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_write_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp commit_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.WriteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stream_id = 1;
  if (!this->_internal_stream_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream_id().data(), static_cast<int>(this->_internal_stream_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.WriteResponse.stream_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stream_id(), target);
  }

  // bytes stream_token = 2;
  if (!this->_internal_stream_token().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_stream_token(), target);
  }

  // repeated .google.firestore.v1.WriteResult write_results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_write_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_write_results(i), target, stream);
  }

  // .google.protobuf.Timestamp commit_time = 4;
  if (this->_internal_has_commit_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::commit_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.WriteResponse)
  return target;
}

size_t WriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.WriteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.firestore.v1.WriteResult write_results = 3;
  total_size += 1UL * this->_internal_write_results_size();
  for (const auto& msg : this->write_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string stream_id = 1;
  if (!this->_internal_stream_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream_id());
  }

  // bytes stream_token = 2;
  if (!this->_internal_stream_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stream_token());
  }

  // .google.protobuf.Timestamp commit_time = 4;
  if (this->_internal_has_commit_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commit_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteResponse::GetClassData() const { return &_class_data_; }

void WriteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteResponse *>(to)->MergeFrom(
      static_cast<const WriteResponse &>(from));
}


void WriteResponse::MergeFrom(const WriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.WriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  write_results_.MergeFrom(from.write_results_);
  if (!from._internal_stream_id().empty()) {
    _internal_set_stream_id(from._internal_stream_id());
  }
  if (!from._internal_stream_token().empty()) {
    _internal_set_stream_token(from._internal_stream_token());
  }
  if (from._internal_has_commit_time()) {
    _internal_mutable_commit_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_commit_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteResponse::CopyFrom(const WriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.WriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteResponse::IsInitialized() const {
  return true;
}

void WriteResponse::InternalSwap(WriteResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  write_results_.InternalSwap(&other->write_results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stream_id_, lhs_arena,
      &other->stream_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stream_token_, lhs_arena,
      &other->stream_token_, rhs_arena
  );
  swap(commit_time_, other->commit_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[17]);
}

// ===================================================================

ListenRequest_LabelsEntry_DoNotUse::ListenRequest_LabelsEntry_DoNotUse() {}
ListenRequest_LabelsEntry_DoNotUse::ListenRequest_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ListenRequest_LabelsEntry_DoNotUse::MergeFrom(const ListenRequest_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ListenRequest_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[18]);
}

// ===================================================================

class ListenRequest::_Internal {
 public:
  static const ::google::firestore::v1::Target& add_target(const ListenRequest* msg);
};

const ::google::firestore::v1::Target&
ListenRequest::_Internal::add_target(const ListenRequest* msg) {
  return *msg->target_change_.add_target_;
}
void ListenRequest::set_allocated_add_target(::google::firestore::v1::Target* add_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target_change();
  if (add_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::firestore::v1::Target>::GetOwningArena(add_target);
    if (message_arena != submessage_arena) {
      add_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_target, submessage_arena);
    }
    set_has_add_target();
    target_change_.add_target_ = add_target;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.ListenRequest.add_target)
}
ListenRequest::ListenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  labels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.ListenRequest)
}
ListenRequest::ListenRequest(const ListenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  database_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    database_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_database().empty()) {
    database_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_database(), 
      GetArenaForAllocation());
  }
  clear_has_target_change();
  switch (from.target_change_case()) {
    case kAddTarget: {
      _internal_mutable_add_target()->::google::firestore::v1::Target::MergeFrom(from._internal_add_target());
      break;
    }
    case kRemoveTarget: {
      _internal_set_remove_target(from._internal_remove_target());
      break;
    }
    case TARGET_CHANGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.ListenRequest)
}

inline void ListenRequest::SharedCtor() {
database_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  database_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_target_change();
}

ListenRequest::~ListenRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.ListenRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  database_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_target_change()) {
    clear_target_change();
  }
}

void ListenRequest::ArenaDtor(void* object) {
  ListenRequest* _this = reinterpret_cast< ListenRequest* >(object);
  (void)_this;
  _this->labels_. ~MapField();
}
inline void ListenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ListenRequest::ArenaDtor);
  }
}
void ListenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListenRequest::clear_target_change() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.ListenRequest)
  switch (target_change_case()) {
    case kAddTarget: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_change_.add_target_;
      }
      break;
    }
    case kRemoveTarget: {
      // No need to clear
      break;
    }
    case TARGET_CHANGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_CHANGE_NOT_SET;
}


void ListenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.ListenRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  database_.ClearToEmpty();
  clear_target_change();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string database = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_database();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.ListenRequest.database"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.Target add_target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 remove_target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_remove_target(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> labels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListenRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.ListenRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (!this->_internal_database().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_database().data(), static_cast<int>(this->_internal_database().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListenRequest.database");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_database(), target);
  }

  // .google.firestore.v1.Target add_target = 2;
  if (_internal_has_add_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::add_target(this), target, stream);
  }

  // int32 remove_target = 3;
  if (_internal_has_remove_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_remove_target(), target);
  }

  // map<string, string> labels = 4;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.firestore.v1.ListenRequest.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.firestore.v1.ListenRequest.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ListenRequest_LabelsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = ListenRequest_LabelsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.ListenRequest)
  return target;
}

size_t ListenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.ListenRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += ListenRequest_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string database = 1;
  if (!this->_internal_database().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_database());
  }

  switch (target_change_case()) {
    // .google.firestore.v1.Target add_target = 2;
    case kAddTarget: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_change_.add_target_);
      break;
    }
    // int32 remove_target = 3;
    case kRemoveTarget: {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_remove_target());
      break;
    }
    case TARGET_CHANGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListenRequest::GetClassData() const { return &_class_data_; }

void ListenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListenRequest *>(to)->MergeFrom(
      static_cast<const ListenRequest &>(from));
}


void ListenRequest::MergeFrom(const ListenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.ListenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (!from._internal_database().empty()) {
    _internal_set_database(from._internal_database());
  }
  switch (from.target_change_case()) {
    case kAddTarget: {
      _internal_mutable_add_target()->::google::firestore::v1::Target::MergeFrom(from._internal_add_target());
      break;
    }
    case kRemoveTarget: {
      _internal_set_remove_target(from._internal_remove_target());
      break;
    }
    case TARGET_CHANGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListenRequest::CopyFrom(const ListenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.ListenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListenRequest::IsInitialized() const {
  return true;
}

void ListenRequest::InternalSwap(ListenRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &database_, lhs_arena,
      &other->database_, rhs_arena
  );
  swap(target_change_, other->target_change_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListenRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[19]);
}

// ===================================================================

class ListenResponse::_Internal {
 public:
  static const ::google::firestore::v1::TargetChange& target_change(const ListenResponse* msg);
  static const ::google::firestore::v1::DocumentChange& document_change(const ListenResponse* msg);
  static const ::google::firestore::v1::DocumentDelete& document_delete(const ListenResponse* msg);
  static const ::google::firestore::v1::DocumentRemove& document_remove(const ListenResponse* msg);
  static const ::google::firestore::v1::ExistenceFilter& filter(const ListenResponse* msg);
};

const ::google::firestore::v1::TargetChange&
ListenResponse::_Internal::target_change(const ListenResponse* msg) {
  return *msg->response_type_.target_change_;
}
const ::google::firestore::v1::DocumentChange&
ListenResponse::_Internal::document_change(const ListenResponse* msg) {
  return *msg->response_type_.document_change_;
}
const ::google::firestore::v1::DocumentDelete&
ListenResponse::_Internal::document_delete(const ListenResponse* msg) {
  return *msg->response_type_.document_delete_;
}
const ::google::firestore::v1::DocumentRemove&
ListenResponse::_Internal::document_remove(const ListenResponse* msg) {
  return *msg->response_type_.document_remove_;
}
const ::google::firestore::v1::ExistenceFilter&
ListenResponse::_Internal::filter(const ListenResponse* msg) {
  return *msg->response_type_.filter_;
}
void ListenResponse::set_allocated_target_change(::google::firestore::v1::TargetChange* target_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response_type();
  if (target_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::firestore::v1::TargetChange>::GetOwningArena(target_change);
    if (message_arena != submessage_arena) {
      target_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_change, submessage_arena);
    }
    set_has_target_change();
    response_type_.target_change_ = target_change;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.ListenResponse.target_change)
}
void ListenResponse::set_allocated_document_change(::google::firestore::v1::DocumentChange* document_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response_type();
  if (document_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_change));
    if (message_arena != submessage_arena) {
      document_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document_change, submessage_arena);
    }
    set_has_document_change();
    response_type_.document_change_ = document_change;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.ListenResponse.document_change)
}
void ListenResponse::clear_document_change() {
  if (_internal_has_document_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_type_.document_change_;
    }
    clear_has_response_type();
  }
}
void ListenResponse::set_allocated_document_delete(::google::firestore::v1::DocumentDelete* document_delete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response_type();
  if (document_delete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_delete));
    if (message_arena != submessage_arena) {
      document_delete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document_delete, submessage_arena);
    }
    set_has_document_delete();
    response_type_.document_delete_ = document_delete;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.ListenResponse.document_delete)
}
void ListenResponse::clear_document_delete() {
  if (_internal_has_document_delete()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_type_.document_delete_;
    }
    clear_has_response_type();
  }
}
void ListenResponse::set_allocated_document_remove(::google::firestore::v1::DocumentRemove* document_remove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response_type();
  if (document_remove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_remove));
    if (message_arena != submessage_arena) {
      document_remove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document_remove, submessage_arena);
    }
    set_has_document_remove();
    response_type_.document_remove_ = document_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.ListenResponse.document_remove)
}
void ListenResponse::clear_document_remove() {
  if (_internal_has_document_remove()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_type_.document_remove_;
    }
    clear_has_response_type();
  }
}
void ListenResponse::set_allocated_filter(::google::firestore::v1::ExistenceFilter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response_type();
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter));
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    set_has_filter();
    response_type_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.ListenResponse.filter)
}
void ListenResponse::clear_filter() {
  if (_internal_has_filter()) {
    if (GetArenaForAllocation() == nullptr) {
      delete response_type_.filter_;
    }
    clear_has_response_type();
  }
}
ListenResponse::ListenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.ListenResponse)
}
ListenResponse::ListenResponse(const ListenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response_type();
  switch (from.response_type_case()) {
    case kTargetChange: {
      _internal_mutable_target_change()->::google::firestore::v1::TargetChange::MergeFrom(from._internal_target_change());
      break;
    }
    case kDocumentChange: {
      _internal_mutable_document_change()->::google::firestore::v1::DocumentChange::MergeFrom(from._internal_document_change());
      break;
    }
    case kDocumentDelete: {
      _internal_mutable_document_delete()->::google::firestore::v1::DocumentDelete::MergeFrom(from._internal_document_delete());
      break;
    }
    case kDocumentRemove: {
      _internal_mutable_document_remove()->::google::firestore::v1::DocumentRemove::MergeFrom(from._internal_document_remove());
      break;
    }
    case kFilter: {
      _internal_mutable_filter()->::google::firestore::v1::ExistenceFilter::MergeFrom(from._internal_filter());
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.ListenResponse)
}

inline void ListenResponse::SharedCtor() {
clear_has_response_type();
}

ListenResponse::~ListenResponse() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.ListenResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response_type()) {
    clear_response_type();
  }
}

void ListenResponse::ArenaDtor(void* object) {
  ListenResponse* _this = reinterpret_cast< ListenResponse* >(object);
  (void)_this;
}
void ListenResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListenResponse::clear_response_type() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.ListenResponse)
  switch (response_type_case()) {
    case kTargetChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_type_.target_change_;
      }
      break;
    }
    case kDocumentChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_type_.document_change_;
      }
      break;
    }
    case kDocumentDelete: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_type_.document_delete_;
      }
      break;
    }
    case kDocumentRemove: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_type_.document_remove_;
      }
      break;
    }
    case kFilter: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_type_.filter_;
      }
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_TYPE_NOT_SET;
}


void ListenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.ListenResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.firestore.v1.TargetChange target_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.DocumentChange document_change = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_document_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.DocumentDelete document_delete = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_document_delete(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.ExistenceFilter filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.DocumentRemove document_remove = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_document_remove(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListenResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.ListenResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.TargetChange target_change = 2;
  if (_internal_has_target_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target_change(this), target, stream);
  }

  // .google.firestore.v1.DocumentChange document_change = 3;
  if (_internal_has_document_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::document_change(this), target, stream);
  }

  // .google.firestore.v1.DocumentDelete document_delete = 4;
  if (_internal_has_document_delete()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::document_delete(this), target, stream);
  }

  // .google.firestore.v1.ExistenceFilter filter = 5;
  if (_internal_has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::filter(this), target, stream);
  }

  // .google.firestore.v1.DocumentRemove document_remove = 6;
  if (_internal_has_document_remove()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::document_remove(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.ListenResponse)
  return target;
}

size_t ListenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.ListenResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_type_case()) {
    // .google.firestore.v1.TargetChange target_change = 2;
    case kTargetChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_type_.target_change_);
      break;
    }
    // .google.firestore.v1.DocumentChange document_change = 3;
    case kDocumentChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_type_.document_change_);
      break;
    }
    // .google.firestore.v1.DocumentDelete document_delete = 4;
    case kDocumentDelete: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_type_.document_delete_);
      break;
    }
    // .google.firestore.v1.DocumentRemove document_remove = 6;
    case kDocumentRemove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_type_.document_remove_);
      break;
    }
    // .google.firestore.v1.ExistenceFilter filter = 5;
    case kFilter: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_type_.filter_);
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListenResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListenResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListenResponse::GetClassData() const { return &_class_data_; }

void ListenResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListenResponse *>(to)->MergeFrom(
      static_cast<const ListenResponse &>(from));
}


void ListenResponse::MergeFrom(const ListenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.ListenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_type_case()) {
    case kTargetChange: {
      _internal_mutable_target_change()->::google::firestore::v1::TargetChange::MergeFrom(from._internal_target_change());
      break;
    }
    case kDocumentChange: {
      _internal_mutable_document_change()->::google::firestore::v1::DocumentChange::MergeFrom(from._internal_document_change());
      break;
    }
    case kDocumentDelete: {
      _internal_mutable_document_delete()->::google::firestore::v1::DocumentDelete::MergeFrom(from._internal_document_delete());
      break;
    }
    case kDocumentRemove: {
      _internal_mutable_document_remove()->::google::firestore::v1::DocumentRemove::MergeFrom(from._internal_document_remove());
      break;
    }
    case kFilter: {
      _internal_mutable_filter()->::google::firestore::v1::ExistenceFilter::MergeFrom(from._internal_filter());
      break;
    }
    case RESPONSE_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListenResponse::CopyFrom(const ListenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.ListenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListenResponse::IsInitialized() const {
  return true;
}

void ListenResponse::InternalSwap(ListenResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(response_type_, other->response_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListenResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[20]);
}

// ===================================================================

class Target_DocumentsTarget::_Internal {
 public:
};

Target_DocumentsTarget::Target_DocumentsTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  documents_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.Target.DocumentsTarget)
}
Target_DocumentsTarget::Target_DocumentsTarget(const Target_DocumentsTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      documents_(from.documents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.Target.DocumentsTarget)
}

inline void Target_DocumentsTarget::SharedCtor() {
}

Target_DocumentsTarget::~Target_DocumentsTarget() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.Target.DocumentsTarget)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Target_DocumentsTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Target_DocumentsTarget::ArenaDtor(void* object) {
  Target_DocumentsTarget* _this = reinterpret_cast< Target_DocumentsTarget* >(object);
  (void)_this;
}
void Target_DocumentsTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Target_DocumentsTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Target_DocumentsTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.Target.DocumentsTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  documents_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Target_DocumentsTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string documents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_documents();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.Target.DocumentsTarget.documents"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Target_DocumentsTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.Target.DocumentsTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string documents = 2;
  for (int i = 0, n = this->_internal_documents_size(); i < n; i++) {
    const auto& s = this->_internal_documents(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.Target.DocumentsTarget.documents");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.Target.DocumentsTarget)
  return target;
}

size_t Target_DocumentsTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.Target.DocumentsTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string documents = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(documents_.size());
  for (int i = 0, n = documents_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      documents_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Target_DocumentsTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Target_DocumentsTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Target_DocumentsTarget::GetClassData() const { return &_class_data_; }

void Target_DocumentsTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Target_DocumentsTarget *>(to)->MergeFrom(
      static_cast<const Target_DocumentsTarget &>(from));
}


void Target_DocumentsTarget::MergeFrom(const Target_DocumentsTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.Target.DocumentsTarget)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  documents_.MergeFrom(from.documents_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Target_DocumentsTarget::CopyFrom(const Target_DocumentsTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.Target.DocumentsTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target_DocumentsTarget::IsInitialized() const {
  return true;
}

void Target_DocumentsTarget::InternalSwap(Target_DocumentsTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  documents_.InternalSwap(&other->documents_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Target_DocumentsTarget::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[21]);
}

// ===================================================================

class Target_QueryTarget::_Internal {
 public:
  static const ::google::firestore::v1::StructuredQuery& structured_query(const Target_QueryTarget* msg);
};

const ::google::firestore::v1::StructuredQuery&
Target_QueryTarget::_Internal::structured_query(const Target_QueryTarget* msg) {
  return *msg->query_type_.structured_query_;
}
void Target_QueryTarget::set_allocated_structured_query(::google::firestore::v1::StructuredQuery* structured_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_query_type();
  if (structured_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(structured_query));
    if (message_arena != submessage_arena) {
      structured_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, structured_query, submessage_arena);
    }
    set_has_structured_query();
    query_type_.structured_query_ = structured_query;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Target.QueryTarget.structured_query)
}
void Target_QueryTarget::clear_structured_query() {
  if (_internal_has_structured_query()) {
    if (GetArenaForAllocation() == nullptr) {
      delete query_type_.structured_query_;
    }
    clear_has_query_type();
  }
}
Target_QueryTarget::Target_QueryTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.Target.QueryTarget)
}
Target_QueryTarget::Target_QueryTarget(const Target_QueryTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent().empty()) {
    parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent(), 
      GetArenaForAllocation());
  }
  clear_has_query_type();
  switch (from.query_type_case()) {
    case kStructuredQuery: {
      _internal_mutable_structured_query()->::google::firestore::v1::StructuredQuery::MergeFrom(from._internal_structured_query());
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.Target.QueryTarget)
}

inline void Target_QueryTarget::SharedCtor() {
parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_query_type();
}

Target_QueryTarget::~Target_QueryTarget() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.Target.QueryTarget)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Target_QueryTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_query_type()) {
    clear_query_type();
  }
}

void Target_QueryTarget::ArenaDtor(void* object) {
  Target_QueryTarget* _this = reinterpret_cast< Target_QueryTarget* >(object);
  (void)_this;
}
void Target_QueryTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Target_QueryTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Target_QueryTarget::clear_query_type() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.Target.QueryTarget)
  switch (query_type_case()) {
    case kStructuredQuery: {
      if (GetArenaForAllocation() == nullptr) {
        delete query_type_.structured_query_;
      }
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QUERY_TYPE_NOT_SET;
}


void Target_QueryTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.Target.QueryTarget)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty();
  clear_query_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Target_QueryTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.Target.QueryTarget.parent"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.StructuredQuery structured_query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_structured_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Target_QueryTarget::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.Target.QueryTarget)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (!this->_internal_parent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.Target.QueryTarget.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // .google.firestore.v1.StructuredQuery structured_query = 2;
  if (_internal_has_structured_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::structured_query(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.Target.QueryTarget)
  return target;
}

size_t Target_QueryTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.Target.QueryTarget)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (!this->_internal_parent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  switch (query_type_case()) {
    // .google.firestore.v1.StructuredQuery structured_query = 2;
    case kStructuredQuery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_type_.structured_query_);
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Target_QueryTarget::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Target_QueryTarget::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Target_QueryTarget::GetClassData() const { return &_class_data_; }

void Target_QueryTarget::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Target_QueryTarget *>(to)->MergeFrom(
      static_cast<const Target_QueryTarget &>(from));
}


void Target_QueryTarget::MergeFrom(const Target_QueryTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.Target.QueryTarget)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent().empty()) {
    _internal_set_parent(from._internal_parent());
  }
  switch (from.query_type_case()) {
    case kStructuredQuery: {
      _internal_mutable_structured_query()->::google::firestore::v1::StructuredQuery::MergeFrom(from._internal_structured_query());
      break;
    }
    case QUERY_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Target_QueryTarget::CopyFrom(const Target_QueryTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.Target.QueryTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target_QueryTarget::IsInitialized() const {
  return true;
}

void Target_QueryTarget::InternalSwap(Target_QueryTarget* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parent_, lhs_arena,
      &other->parent_, rhs_arena
  );
  swap(query_type_, other->query_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Target_QueryTarget::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[22]);
}

// ===================================================================

class Target::_Internal {
 public:
  static const ::google::firestore::v1::Target_QueryTarget& query(const Target* msg);
  static const ::google::firestore::v1::Target_DocumentsTarget& documents(const Target* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& read_time(const Target* msg);
};

const ::google::firestore::v1::Target_QueryTarget&
Target::_Internal::query(const Target* msg) {
  return *msg->target_type_.query_;
}
const ::google::firestore::v1::Target_DocumentsTarget&
Target::_Internal::documents(const Target* msg) {
  return *msg->target_type_.documents_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Target::_Internal::read_time(const Target* msg) {
  return *msg->resume_type_.read_time_;
}
void Target::set_allocated_query(::google::firestore::v1::Target_QueryTarget* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target_type();
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::firestore::v1::Target_QueryTarget>::GetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    set_has_query();
    target_type_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Target.query)
}
void Target::set_allocated_documents(::google::firestore::v1::Target_DocumentsTarget* documents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_target_type();
  if (documents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::google::firestore::v1::Target_DocumentsTarget>::GetOwningArena(documents);
    if (message_arena != submessage_arena) {
      documents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, documents, submessage_arena);
    }
    set_has_documents();
    target_type_.documents_ = documents;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Target.documents)
}
void Target::set_allocated_read_time(::PROTOBUF_NAMESPACE_ID::Timestamp* read_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_resume_type();
  if (read_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_time));
    if (message_arena != submessage_arena) {
      read_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_time, submessage_arena);
    }
    set_has_read_time();
    resume_type_.read_time_ = read_time;
  }
  // @@protoc_insertion_point(field_set_allocated:google.firestore.v1.Target.read_time)
}
void Target::clear_read_time() {
  if (_internal_has_read_time()) {
    if (GetArenaForAllocation() == nullptr) {
      delete resume_type_.read_time_;
    }
    clear_has_resume_type();
  }
}
Target::Target(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.Target)
}
Target::Target(const Target& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_id_, &from.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&once_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(once_));
  clear_has_target_type();
  switch (from.target_type_case()) {
    case kQuery: {
      _internal_mutable_query()->::google::firestore::v1::Target_QueryTarget::MergeFrom(from._internal_query());
      break;
    }
    case kDocuments: {
      _internal_mutable_documents()->::google::firestore::v1::Target_DocumentsTarget::MergeFrom(from._internal_documents());
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  clear_has_resume_type();
  switch (from.resume_type_case()) {
    case kResumeToken: {
      _internal_set_resume_token(from._internal_resume_token());
      break;
    }
    case kReadTime: {
      _internal_mutable_read_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_read_time());
      break;
    }
    case RESUME_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.Target)
}

inline void Target::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&once_) -
    reinterpret_cast<char*>(&target_id_)) + sizeof(once_));
clear_has_target_type();
clear_has_resume_type();
}

Target::~Target() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.Target)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Target::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_target_type()) {
    clear_target_type();
  }
  if (has_resume_type()) {
    clear_resume_type();
  }
}

void Target::ArenaDtor(void* object) {
  Target* _this = reinterpret_cast< Target* >(object);
  (void)_this;
}
void Target::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Target::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Target::clear_target_type() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.Target)
  switch (target_type_case()) {
    case kQuery: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_type_.query_;
      }
      break;
    }
    case kDocuments: {
      if (GetArenaForAllocation() == nullptr) {
        delete target_type_.documents_;
      }
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_TYPE_NOT_SET;
}

void Target::clear_resume_type() {
// @@protoc_insertion_point(one_of_clear_start:google.firestore.v1.Target)
  switch (resume_type_case()) {
    case kResumeToken: {
      resume_type_.resume_token_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kReadTime: {
      if (GetArenaForAllocation() == nullptr) {
        delete resume_type_.read_time_;
      }
      break;
    }
    case RESUME_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = RESUME_TYPE_NOT_SET;
}


void Target::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.Target)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&once_) -
      reinterpret_cast<char*>(&target_id_)) + sizeof(once_));
  clear_target_type();
  clear_resume_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Target::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.firestore.v1.Target.QueryTarget query = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_query(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.firestore.v1.Target.DocumentsTarget documents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_documents(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes resume_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_resume_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool once = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          once_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp read_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Target::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.Target)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.Target.QueryTarget query = 2;
  if (_internal_has_query()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::query(this), target, stream);
  }

  // .google.firestore.v1.Target.DocumentsTarget documents = 3;
  if (_internal_has_documents()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::documents(this), target, stream);
  }

  // bytes resume_token = 4;
  if (_internal_has_resume_token()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_resume_token(), target);
  }

  // int32 target_id = 5;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_target_id(), target);
  }

  // bool once = 6;
  if (this->_internal_once() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_once(), target);
  }

  // .google.protobuf.Timestamp read_time = 11;
  if (_internal_has_read_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::read_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.Target)
  return target;
}

size_t Target::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.Target)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 target_id = 5;
  if (this->_internal_target_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_target_id());
  }

  // bool once = 6;
  if (this->_internal_once() != 0) {
    total_size += 1 + 1;
  }

  switch (target_type_case()) {
    // .google.firestore.v1.Target.QueryTarget query = 2;
    case kQuery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_type_.query_);
      break;
    }
    // .google.firestore.v1.Target.DocumentsTarget documents = 3;
    case kDocuments: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_type_.documents_);
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  switch (resume_type_case()) {
    // bytes resume_token = 4;
    case kResumeToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_resume_token());
      break;
    }
    // .google.protobuf.Timestamp read_time = 11;
    case kReadTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resume_type_.read_time_);
      break;
    }
    case RESUME_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Target::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Target::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Target::GetClassData() const { return &_class_data_; }

void Target::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Target *>(to)->MergeFrom(
      static_cast<const Target &>(from));
}


void Target::MergeFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.Target)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_once() != 0) {
    _internal_set_once(from._internal_once());
  }
  switch (from.target_type_case()) {
    case kQuery: {
      _internal_mutable_query()->::google::firestore::v1::Target_QueryTarget::MergeFrom(from._internal_query());
      break;
    }
    case kDocuments: {
      _internal_mutable_documents()->::google::firestore::v1::Target_DocumentsTarget::MergeFrom(from._internal_documents());
      break;
    }
    case TARGET_TYPE_NOT_SET: {
      break;
    }
  }
  switch (from.resume_type_case()) {
    case kResumeToken: {
      _internal_set_resume_token(from._internal_resume_token());
      break;
    }
    case kReadTime: {
      _internal_mutable_read_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_read_time());
      break;
    }
    case RESUME_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Target::CopyFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target::IsInitialized() const {
  return true;
}

void Target::InternalSwap(Target* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Target, once_)
      + sizeof(Target::once_)
      - PROTOBUF_FIELD_OFFSET(Target, target_id_)>(
          reinterpret_cast<char*>(&target_id_),
          reinterpret_cast<char*>(&other->target_id_));
  swap(target_type_, other->target_type_);
  swap(resume_type_, other->resume_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Target::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[23]);
}

// ===================================================================

class TargetChange::_Internal {
 public:
  static const ::google::rpc::Status& cause(const TargetChange* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& read_time(const TargetChange* msg);
};

const ::google::rpc::Status&
TargetChange::_Internal::cause(const TargetChange* msg) {
  return *msg->cause_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TargetChange::_Internal::read_time(const TargetChange* msg) {
  return *msg->read_time_;
}
void TargetChange::clear_cause() {
  if (GetArenaForAllocation() == nullptr && cause_ != nullptr) {
    delete cause_;
  }
  cause_ = nullptr;
}
void TargetChange::clear_read_time() {
  if (GetArenaForAllocation() == nullptr && read_time_ != nullptr) {
    delete read_time_;
  }
  read_time_ = nullptr;
}
TargetChange::TargetChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  target_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.TargetChange)
}
TargetChange::TargetChange(const TargetChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      target_ids_(from.target_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  resume_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    resume_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_resume_token().empty()) {
    resume_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resume_token(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_cause()) {
    cause_ = new ::google::rpc::Status(*from.cause_);
  } else {
    cause_ = nullptr;
  }
  if (from._internal_has_read_time()) {
    read_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.read_time_);
  } else {
    read_time_ = nullptr;
  }
  target_change_type_ = from.target_change_type_;
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.TargetChange)
}

inline void TargetChange::SharedCtor() {
resume_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  resume_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cause_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_change_type_) -
    reinterpret_cast<char*>(&cause_)) + sizeof(target_change_type_));
}

TargetChange::~TargetChange() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.TargetChange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TargetChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  resume_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cause_;
  if (this != internal_default_instance()) delete read_time_;
}

void TargetChange::ArenaDtor(void* object) {
  TargetChange* _this = reinterpret_cast< TargetChange* >(object);
  (void)_this;
}
void TargetChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TargetChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TargetChange::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.TargetChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_ids_.Clear();
  resume_token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && cause_ != nullptr) {
    delete cause_;
  }
  cause_ = nullptr;
  if (GetArenaForAllocation() == nullptr && read_time_ != nullptr) {
    delete read_time_;
  }
  read_time_ = nullptr;
  target_change_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.firestore.v1.TargetChange.TargetChangeType target_change_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_target_change_type(static_cast<::google::firestore::v1::TargetChange_TargetChangeType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 target_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_target_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_target_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.rpc.Status cause = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cause(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes resume_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_resume_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp read_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.TargetChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.firestore.v1.TargetChange.TargetChangeType target_change_type = 1;
  if (this->_internal_target_change_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_target_change_type(), target);
  }

  // repeated int32 target_ids = 2;
  {
    int byte_size = _target_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_target_ids(), byte_size, target);
    }
  }

  // .google.rpc.Status cause = 3;
  if (this->_internal_has_cause()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cause(this), target, stream);
  }

  // bytes resume_token = 4;
  if (!this->_internal_resume_token().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_resume_token(), target);
  }

  // .google.protobuf.Timestamp read_time = 6;
  if (this->_internal_has_read_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::read_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.TargetChange)
  return target;
}

size_t TargetChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.TargetChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 target_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->target_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _target_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes resume_token = 4;
  if (!this->_internal_resume_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_resume_token());
  }

  // .google.rpc.Status cause = 3;
  if (this->_internal_has_cause()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cause_);
  }

  // .google.protobuf.Timestamp read_time = 6;
  if (this->_internal_has_read_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_time_);
  }

  // .google.firestore.v1.TargetChange.TargetChangeType target_change_type = 1;
  if (this->_internal_target_change_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_target_change_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TargetChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetChange::GetClassData() const { return &_class_data_; }

void TargetChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TargetChange *>(to)->MergeFrom(
      static_cast<const TargetChange &>(from));
}


void TargetChange::MergeFrom(const TargetChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.TargetChange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  target_ids_.MergeFrom(from.target_ids_);
  if (!from._internal_resume_token().empty()) {
    _internal_set_resume_token(from._internal_resume_token());
  }
  if (from._internal_has_cause()) {
    _internal_mutable_cause()->::google::rpc::Status::MergeFrom(from._internal_cause());
  }
  if (from._internal_has_read_time()) {
    _internal_mutable_read_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_read_time());
  }
  if (from._internal_target_change_type() != 0) {
    _internal_set_target_change_type(from._internal_target_change_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetChange::CopyFrom(const TargetChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.TargetChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetChange::IsInitialized() const {
  return true;
}

void TargetChange::InternalSwap(TargetChange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  target_ids_.InternalSwap(&other->target_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &resume_token_, lhs_arena,
      &other->resume_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetChange, target_change_type_)
      + sizeof(TargetChange::target_change_type_)
      - PROTOBUF_FIELD_OFFSET(TargetChange, cause_)>(
          reinterpret_cast<char*>(&cause_),
          reinterpret_cast<char*>(&other->cause_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetChange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[24]);
}

// ===================================================================

class ListCollectionIdsRequest::_Internal {
 public:
};

ListCollectionIdsRequest::ListCollectionIdsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.ListCollectionIdsRequest)
}
ListCollectionIdsRequest::ListCollectionIdsRequest(const ListCollectionIdsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent().empty()) {
    parent_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parent(), 
      GetArenaForAllocation());
  }
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_page_token(), 
      GetArenaForAllocation());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.ListCollectionIdsRequest)
}

inline void ListCollectionIdsRequest::SharedCtor() {
parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_size_ = 0;
}

ListCollectionIdsRequest::~ListCollectionIdsRequest() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.ListCollectionIdsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListCollectionIdsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListCollectionIdsRequest::ArenaDtor(void* object) {
  ListCollectionIdsRequest* _this = reinterpret_cast< ListCollectionIdsRequest* >(object);
  (void)_this;
}
void ListCollectionIdsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCollectionIdsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListCollectionIdsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.ListCollectionIdsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty();
  page_token_.ClearToEmpty();
  page_size_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCollectionIdsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.ListCollectionIdsRequest.parent"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string page_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.ListCollectionIdsRequest.page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListCollectionIdsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.ListCollectionIdsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (!this->_internal_parent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListCollectionIdsRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // int32 page_size = 2;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_size(), target);
  }

  // string page_token = 3;
  if (!this->_internal_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListCollectionIdsRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.ListCollectionIdsRequest)
  return target;
}

size_t ListCollectionIdsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.ListCollectionIdsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (!this->_internal_parent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // string page_token = 3;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 2;
  if (this->_internal_page_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCollectionIdsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListCollectionIdsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCollectionIdsRequest::GetClassData() const { return &_class_data_; }

void ListCollectionIdsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListCollectionIdsRequest *>(to)->MergeFrom(
      static_cast<const ListCollectionIdsRequest &>(from));
}


void ListCollectionIdsRequest::MergeFrom(const ListCollectionIdsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.ListCollectionIdsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent().empty()) {
    _internal_set_parent(from._internal_parent());
  }
  if (!from._internal_page_token().empty()) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCollectionIdsRequest::CopyFrom(const ListCollectionIdsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.ListCollectionIdsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollectionIdsRequest::IsInitialized() const {
  return true;
}

void ListCollectionIdsRequest::InternalSwap(ListCollectionIdsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parent_, lhs_arena,
      &other->parent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &page_token_, lhs_arena,
      &other->page_token_, rhs_arena
  );
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCollectionIdsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[25]);
}

// ===================================================================

class ListCollectionIdsResponse::_Internal {
 public:
};

ListCollectionIdsResponse::ListCollectionIdsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  collection_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:google.firestore.v1.ListCollectionIdsResponse)
}
ListCollectionIdsResponse::ListCollectionIdsResponse(const ListCollectionIdsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      collection_ids_(from.collection_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_next_page_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:google.firestore.v1.ListCollectionIdsResponse)
}

inline void ListCollectionIdsResponse::SharedCtor() {
next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListCollectionIdsResponse::~ListCollectionIdsResponse() {
  // @@protoc_insertion_point(destructor:google.firestore.v1.ListCollectionIdsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListCollectionIdsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListCollectionIdsResponse::ArenaDtor(void* object) {
  ListCollectionIdsResponse* _this = reinterpret_cast< ListCollectionIdsResponse* >(object);
  (void)_this;
}
void ListCollectionIdsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCollectionIdsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListCollectionIdsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.firestore.v1.ListCollectionIdsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_ids_.Clear();
  next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCollectionIdsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string collection_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_collection_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.ListCollectionIdsResponse.collection_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.firestore.v1.ListCollectionIdsResponse.next_page_token"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListCollectionIdsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.firestore.v1.ListCollectionIdsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string collection_ids = 1;
  for (int i = 0, n = this->_internal_collection_ids_size(); i < n; i++) {
    const auto& s = this->_internal_collection_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListCollectionIdsResponse.collection_ids");
    target = stream->WriteString(1, s, target);
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.firestore.v1.ListCollectionIdsResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.firestore.v1.ListCollectionIdsResponse)
  return target;
}

size_t ListCollectionIdsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.firestore.v1.ListCollectionIdsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string collection_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(collection_ids_.size());
  for (int i = 0, n = collection_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      collection_ids_.Get(i));
  }

  // string next_page_token = 2;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCollectionIdsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListCollectionIdsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCollectionIdsResponse::GetClassData() const { return &_class_data_; }

void ListCollectionIdsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListCollectionIdsResponse *>(to)->MergeFrom(
      static_cast<const ListCollectionIdsResponse &>(from));
}


void ListCollectionIdsResponse::MergeFrom(const ListCollectionIdsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.firestore.v1.ListCollectionIdsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  collection_ids_.MergeFrom(from.collection_ids_);
  if (!from._internal_next_page_token().empty()) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCollectionIdsResponse::CopyFrom(const ListCollectionIdsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.firestore.v1.ListCollectionIdsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCollectionIdsResponse::IsInitialized() const {
  return true;
}

void ListCollectionIdsResponse::InternalSwap(ListCollectionIdsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  collection_ids_.InternalSwap(&other->collection_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &next_page_token_, lhs_arena,
      &other->next_page_token_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCollectionIdsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_getter, &descriptor_table_google_2ffirestore_2fv1_2ffirestore_2eproto_once,
      file_level_metadata_google_2ffirestore_2fv1_2ffirestore_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace firestore
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::firestore::v1::GetDocumentRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::GetDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::GetDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::ListDocumentsRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::ListDocumentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::ListDocumentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::ListDocumentsResponse* Arena::CreateMaybeMessage< ::google::firestore::v1::ListDocumentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::ListDocumentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::CreateDocumentRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::CreateDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::CreateDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::UpdateDocumentRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::UpdateDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::UpdateDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::DeleteDocumentRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::DeleteDocumentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::DeleteDocumentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::BatchGetDocumentsRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::BatchGetDocumentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::BatchGetDocumentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::BatchGetDocumentsResponse* Arena::CreateMaybeMessage< ::google::firestore::v1::BatchGetDocumentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::BatchGetDocumentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::BeginTransactionRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::BeginTransactionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::BeginTransactionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::BeginTransactionResponse* Arena::CreateMaybeMessage< ::google::firestore::v1::BeginTransactionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::BeginTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::CommitRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::CommitRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::CommitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::CommitResponse* Arena::CreateMaybeMessage< ::google::firestore::v1::CommitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::CommitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::RollbackRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::RollbackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::RollbackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::RunQueryRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::RunQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::RunQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::RunQueryResponse* Arena::CreateMaybeMessage< ::google::firestore::v1::RunQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::RunQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::WriteRequest_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::WriteRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::WriteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::WriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::WriteResponse* Arena::CreateMaybeMessage< ::google::firestore::v1::WriteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::WriteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::ListenRequest_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::ListenRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::ListenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::ListenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::ListenResponse* Arena::CreateMaybeMessage< ::google::firestore::v1::ListenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::ListenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::Target_DocumentsTarget* Arena::CreateMaybeMessage< ::google::firestore::v1::Target_DocumentsTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::Target_DocumentsTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::Target_QueryTarget* Arena::CreateMaybeMessage< ::google::firestore::v1::Target_QueryTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::Target_QueryTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::Target* Arena::CreateMaybeMessage< ::google::firestore::v1::Target >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::Target >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::TargetChange* Arena::CreateMaybeMessage< ::google::firestore::v1::TargetChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::TargetChange >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::ListCollectionIdsRequest* Arena::CreateMaybeMessage< ::google::firestore::v1::ListCollectionIdsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::ListCollectionIdsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::firestore::v1::ListCollectionIdsResponse* Arena::CreateMaybeMessage< ::google::firestore::v1::ListCollectionIdsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::firestore::v1::ListCollectionIdsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
